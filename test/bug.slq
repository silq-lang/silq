

/+
def indexOf[a:ctype](eq:a^2→lifted !𝔹)[n:!ℕ](haystack: a^n,needle: a){ // (crash)
	for i in 0..n{
		if eq(haystack[i],needle){
			return i;
		}
	}
	return -1;
}

def main(){
	indexOf𝔹=indexOf((x:!𝔹,y:!𝔹)lifted⇒x=y);
	indexOfℕ=indexOf((x:!ℕ,y:!ℕ)lifted⇒x=y);
}
+/

/+
def foo(x: !Π(n:!ℕ,)qfree. 𝔹^n)qfree⇒x(2,);
def bar(x: !Π(const n:!ℕ^1)qfree. 𝔹^n[0])qfree⇒x(3,); // (crash)
def zeros₁(m:!ℕ,)qfree⇒vector(m,0:𝔹);
def zeros₂(k:!ℕ^1)qfree⇒vector(k[0],0:𝔹);

def main(){
	x:=measure(H(0:𝔹));
	if x{
		a:=foo;
		b:=zeros₁;
	}else{
		a:=bar;
		b:=zeros₂;
	}
	return a(b);
}
+/


/+
def main() {
	forget(2+2=5);
}
+/

/+
def main(){
	n:=200; // TODO: make running time of frontend simulator scale linearly in n!
	a:=vector(n,1:𝔹);
	r:=0:int[32];
	def index(a: 𝔹^n,i:!ℕ)lifted{
		return a[i];
	}
	for i in [0..n){
		r+=a[i];
		r+=index(a,i);
	}
	return r;
}
+/


