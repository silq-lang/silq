
/+
def maj(x:𝔹,y:𝔹,z:𝔹)lifted => if x=y then y else z;
def H_n[n:ℕ](xs:𝔹^n){
	if n≠0 {
		with (x,xs):=xs do {
			x:=H(x);
			xs:=H_n(xs);
		}
	}
	return xs;
}
def dj(){
	xs:=vector(3,0:𝔹);
	with xs:=H_n(xs) do {
		if maj(xs) {
			phase(π);
		}
	}
	return measure(xs)≠0;
}
+/

/+
def foo(x: !Π(n:!ℕ,)qfree. 𝔹^n)qfree⇒x(2,);
def bar(x: !Π(const n:!ℕ^1)qfree. 𝔹^n[0])qfree⇒x(3,); // crash
def zeros₁(m:!ℕ,)qfree⇒vector(m,0:𝔹);
def zeros₂(k:!ℕ^1)qfree⇒vector(k[0],0:𝔹);

def main(){
	x:=measure(H(0:𝔹));
	if x{
		a:=foo;
		b:=zeros₁;
	}else{
		a:=bar;
		b:=zeros₂;
	}
	return a(b);
}
+/

/+
def bar(x: !Π(n:!ℕ^1)qfree. 𝔹^n)qfree⇒x(3,); // crash
def zeros(m:!ℕ,)qfree⇒vector(m,0:𝔹);
def main()⇒bar(zeros);
+/

/+
def f(x:𝔹^2,const y:𝔹)qfree:𝔹^2⇒x;
def main(){
	x:=(H(0:B),);
	y:=H(0:B);
	f(x,y):=x; // TODO: error
	return (x,y);
}
+/

/+
def polyPauliRotY[d:!ℕ](coeffs:!ℝ^(d+1))[n:!ℕ](const state:𝔹^n,target:a)mfree{
	rotation_coeffs:=vector(2^n,0:!ℝ);
	rotation_coeffs=for2_(0,d+1)((i:!ℕ,rotation_coeffs:!ℝ^(2^n),mcoeffs:!ℕ^(2^n))qfree{
		nrotation_coeffs:=mkvec(2^n)((j:!ℕ)qfree⇒rotation_coeffs[j]+coeffs[i]*mcoeffs[j]);
		if i<d { ncoeffs:=nextCoeffs(mcoeffs); }
		else{ ncoeffs:=mcoeffs; }
		return (nrotation_coeffs,ncoeffs);
	})(rotation_coeffs,mkvec(2^n)((i:!ℕ)qfree⇒(i=0):!ℕ))[0];
	target:=for_(0,2^n)((i:!ℕ,const state:𝔹^n,target:𝔹)mfree{
		if rotation_coeffs[i]!=0{
			mask:=i as !uint[n] as !𝔹^n;
			def rec(const state:𝔹^n,const mask:!𝔹^n,j:!ℕ,target:a)mfree:a⇒
				if n≤j then rotY(rotation_coeffs[i],target)
				else if mask[j] then if state[j] then rec(state,mask,j+1,target) else target
				else rec(state,mask,j+1,target);
			target:=rec(state,mask,0,target);
		}
		return target
	})(state,target);
	return target;
}
+/

/+

def mkvec(n:!ℕ)[a](f:!ℕ!→qfree a)qfree:!a^n ⇒ if n=0 then () coerce !a^n else mkvec(n sub 1)(f)~(f(n sub 1),);

def nextCoeffs[n:!ℕ](mcoeffs:!ℕ^(2^n))qfree ⇒ mkvec(2^n)((i:!ℕ)qfree{
	mask:=i as !uint[n];
	def sum(j:!ℕ)qfree:!ℕ ⇒ if j<n then (if mask[j] then 2^j·(mcoeffs[i]+mcoeffs[i⊕2^j]) else 0)+sum(j+1) else 0;
	return sum(0);
});

def for_(i:!ℕ,n:!ℕ)[a,b](f: !ℕ×a×b!→lifted a×b)(x:a,y:b)lifted:a×b⇒if i<n then for_(i+1,n)(f)(f(i,x,y)) else (x,y);

def polyPauliRot[a:qtype](rot: !ℝ×a!→mfree a)[d:!ℕ](coeffs:!ℝ^(d+1))[n:!ℕ](const state:𝔹^n,target:a)mfree{
	mcoeffs:=vector(2^n,0);
	mcoeffs[0]=1;
	rotation_coeffs:=vector(2^n,0);
	(rotation_coeffs,mcoeffs)
	=for_(0,d+1)((i:!ℕ,rotation_coeffs:!ℝ^(2^n),mcoeffs:!ℕ^(2^n))qfree{
		nrotation_coeffs:=mkvec(2^n)((j:!ℕ)qfree⇒rotation_coeffs[j]+coeffs[i]*mcoeffs[j]);
		if i<d { ncoeffs:=nextCoeffs(mcoeffs); }
		else{ ncoeffs:=mcoeffs; }
		return (nrotation_coeffs,ncoeffs);
	})(rotation_coeffs,mcoeffs);
	//print(rotation_coeffs);
	//__show(__query("type",k));
	__show(__query("type",rotation_coeffs));
	for i in 0..2^n{
		if rotation_coeffs[i]!=0{
			mask:=i as !uint[n];
			def rec(const state:𝔹^n,const mask:!uint[n],j:!ℕ,target:a)mfree:a⇒
				if n≤j then rot(rotation_coeffs[i],target)
				else if mask[j] then if state[j] then rec(state,mask,j+1,target) else target
				else rec(state,mask,j+1,target);
			target:=rec(state,mask,0,target);
		}
	}
	return target;
}

def main(){
	return polyPauliRot(rotY)[3](1,2,3,4)(3 as uint[5] as 𝔹^5,1:𝔹);
}
+/

// def mkvec(n:!ℕ)[a:ctype](f:!ℕ!→qfree a)qfree:a^n ⇒ if n=0 then () coerce a^n else mkvec(n sub 1)(f)~(f(n sub 1),); // TODO
//def mkvec(n:!ℕ)[a](f:!ℕ!→qfree a)qfree:a^n ⇒ if n=0 then () coerce a^n else mkvec(n sub 1)(f)~(f(n sub 1),); // TODO
/+
def nextCoeffs[n:!ℕ](mcoeffs:!ℕ^(2^n))qfree{
	nmcoeffs:=vector(2^n,0);
	for i in 0..2^n{
		mask:=i as uint[n];
		for j in 0..n{
			if mask[j]{ // note: this is quantum control
				nmcoeffs[i]+=2^j·(mcoeffs[i]+mcoeffs[i⊕2^j]); // TODO: error
			}
		}
	}
	return nmcoeffs;
}
+/

/+
def sum[n:!ℕ](weights:!ℕ^n)qfree:!ℕ ⇒ if n=0 then 0 else weights[0]+sum(weights[1..n]);
def log₂(x:!ℝ)qfree⇒log(x)/log(2);
def num_sum_bits[n:!ℕ](weights:!ℕ^n)qfree: !ℕ ⇒ if sum(weights)>0 then floor(log₂(sum(weights)))+1 coerce !ℕ else 1;
def weightedAdder[n:!ℕ](weights:!ℕ^n):uint[num_sum_bits(weights)]{ return 0:uint[num_sum_bits(weights)]; } // crash
+/

/+
def linearRotY[n:!ℕ](slope:!ℝ,offset:!ℝ,const q:𝔹^n,target:𝔹){
	target:=rotY(offset,target);
	def rec(const q:𝔹^n,target:𝔹,i:!ℕ){ // (crash)
		if i<n{
			if q[i]{ target:=rotY(slope·2^i,target); }
			return rec(q,target,i+1);
		}else{
			return target;
		}
	}
	return rec(q,target,0);
}
+/
/+
def makeIntegerComparator(value:!ℤ,geq:!𝔹)[n:!ℕ](const state:𝔹^n,compare:𝔹):𝔹{
	if value≤0{
		if geq{ compare:=X(compare); }
	}else if value<2^n{
		if n>1{
			twos:=2^n-value as !uint[n];
			//def rec[n:!ℕ](const state:𝔹^n,compare:𝔹,i:!ℕ,const r:𝔹):𝔹{ // TODO: shadowing n should work
			def rec(const state:𝔹^n,compare:𝔹,i:!ℕ,const r:𝔹):𝔹{
				if i<n-1{
					nr:=if twos[i] then state[i]∨r else state[i]∧r;
					return rec(state,compare,i+1,nr);
				}else{
					compare⊕=if twos[i] then state[i]∨r else state[i]∧r;
					return compare;
				}
			}
			compare:=rec(state,compare,1,twos[0]∧state[0]);
			if !geq{ compare:=X(compare); }
		}else{
			compare⊕=state[0];
			if !geq{ compare:=X(compare); }
		}
	}else{
		if !geq{ compare:=X(compare); }
	}
	return compare;
}
+/

/+
def f[n:!ℕ](x:uint[n])mfree⇒x;
def main(){
	n:=1;
	r:=reverse(f[n])(0:uint[n]); // TODO
	return measure(r) as !ℤ;
}
+/

/+
def main() {
	forget(2+2=5);
}
+/

/+
def main(){
	x:=1/2;
	return x|x; // TODO: error
}
+/

/+
def main(){
	x:=0:𝔹;
	y:=0:𝔹;
	(x,y)[0]=0:𝔹; // TODO: error
}
+/
/+
def main(){
	x:=vector(10,0:𝔹);
	(x[0],x[1])[0]=1:𝔹; // TODO: error
}
+/
/+
+/
/+
def main(){
	[1,2]:=[1,2,3]; // TODO: error
}
+/

/+
def foo[n:!ℕ, rr:!ℕ](
	const r:!ℕ,
	const ee:(𝔹^rr)^rr,
)mfree{
	rbar := max(2 * r div 3, 1) coerce !ℕ;
	rrbar := 2^rbar;

	tau := vector(rrbar,0:int[r]);
	for i in [0..rrbar){ for j in [0..r){ tau[i][j]:=H(tau[i][j]); } }
	eew := vector(rrbar,false):B^rrbar;
	for i in [0..rrbar){ eew[i]:=H(eew[i]); }

	// snippet from Figure 2
	cTri := 0:int[rrbar];
	for j in [0..rrbar) {
		for k in [j+1..rrbar) {
			if ee[tau[j]][tau[k]] && eew[j] && eew[k] { // crash
				cTri += 1;
	}	}	}
    // ---------------------
	return (tau as int[r][], eew as 𝔹[], cTri as 𝔹[]);
}

def main(){
	return foo[2,2](2,vector(2,vector(2,true)));
}
+/

/+
def main(){
	a:=[]:ℕ[]; // TODO: error here?
	a~=[1];
}
+/

//def foo[n:!𝔹]()⇒vector(n,0:𝔹);

/+
def main(){
	n:=200; // TODO: make running time scale linearly in n!
	a:=vector(n,1:𝔹);
	r:=0:int[32];
	def index(a: 𝔹^n,i:!ℕ)lifted{
		return a[i];
	}
	for i in [0..n){
		r+=a[i];
		r+=index(a,i);
	}
	return r;
}
+/

/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	while(measure(H(0:𝔹))){
		forget(y);
		y:=dup(x); // TODO
	}
	return H(x);
}
+/


/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n-1](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/

/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n sub 1](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/

/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n-1 coerce !ℕ](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/


