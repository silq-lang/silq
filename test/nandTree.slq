// simplified algorithm for evaluating balanced binary nand trees
// Figure 2 in paper: http://www.ucw.cz/~robert/papers/andor-siamjc.pdf

// (down,left,right):=(0,1,2):!uint[2]^3; // TODO
down:=0:!uint[2];
left:=1:!uint[2];
right:=2:!uint[2];

def log₂(k:!ℕ)qfree:!ℕ ⇒ if k=1 then 0 else 1+log₂((k+1) div 2);

def makeUniform(k:!ℕ)mfree:uint[log₂(k)]{
	return wToUniform(zeroToW(vector(k,0:𝔹))); // inefficient
	/*while true{ // not mfree
		x:=0:uint[log₂(k)];
		for i in 0..log₂(k){ x[i]:=H(x[i]); }
		if measure(x<k){ return x; }
		measure(x);
	}*/
}

def phaseQ[n:!ℕ](const φ:uint[n])mfree{
	for i in [0..n){ if φ[i]{ phase(2·π·2^i/2^n); } }
}

def uniformToW[k:!ℕ](x:uint[log₂(k)])qfree:𝔹^k{
	y:=vector(k,0:𝔹);
	for i in 0..k{ y[i]=x=i; }
	def getx(const y:𝔹^k,const i:!ℕ)qfree:uint[log₂(k)]{
		if i==0{ return 0 as uint[log₂(k)]; }
		if y[i]{ return i as uint[log₂(k)]; }
		return getx(y,i sub 1);
	}
	forget(x=getx(y,k sub 1));
	return y;
}

// def wToUniform[k:!ℕ](y:𝔹^k)mfree⇒reverse(uniformToW)(y); // TODO

def wToUniform[k:!ℕ](y:𝔹^k)mfree{
	def getx(const y:𝔹^k,const i:!ℕ)qfree:uint[log₂(k)]{
		if i==0{ return 0 as uint[log₂(k)]; }
		if y[i]{ return i as uint[log₂(k)]; }
		return getx(y,i sub 1);
	}
	x:=getx(y,k sub 1);
	forget(y=uniformToW(dup(x)));
	return x;
}

def zeroToW[n:!ℕ](x:𝔹^n)mfree:𝔹^n{
	if n==1{ x[0]:=X(x[0]); }
	else if n>1{
		(head,)~tail:=x;
		θ:=2·asin(1/sqrt(n));
		head:=rotY(θ,head);
		if !head { tail := zeroToW(tail); }
		x:=(head,)~tail;
	}
	return x;
}
def wToZero[n:!ℕ](x:𝔹^n)mfree:𝔹^n⇒reverse(zeroToW)(x);

def zeroToUniform[n:!ℕ](x:𝔹^n)mfree:uint[log₂(n)]⇒wToUniform(zeroToW(x));
// def uniformToZero[n:!ℕ](x:uint[log₂(n)])mfree:𝔹^n⇒reverse(zeroToUniform)(x); // TODO
def uniformToZero[n:!ℕ](x:uint[log₂(n)])mfree:𝔹^n⇒wToZero(uniformToW(x));

def refl₁(c:uint[2])mfree:uint[2]{ // apply reflection 2|u⟩⟨u|-1, u=1/√3(|0⟩+|1⟩+|2⟩)
	c:=uniformToZero[3](c as 𝔹^2 coerce 𝔹^log₂(3) as uint[log₂(3)]) as uint[3];
	if c≠0{ phase(π); }
	return zeroToUniform(c as 𝔹^3) as 𝔹^log₂(3) coerce 𝔹^2 as uint[2];
}

def refl₂[N:!ℕ](c:uint[2])mfree{ // apply reflection 2|u'⟩⟨u'|-1, u'=1/N^¼|0⟩+√(1-1/√N)|1⟩
	(x,y):=c as 𝔹^2;
	if !y{
		θ:=2·asin(sqrt(1-1/sqrt(N)));
		x:=rotY(θ,Z(rotY(-θ,x)));
	}else{
		phase(π);
	}
	return (x,y) as uint[2];
}

def QFT[n:!ℕ](ψ: uint[n])mfree: uint[n]{
	for k in [0..n div 2){
		(ψ[k],ψ[n-k-1]) := (ψ[n-k-1],ψ[k]);
	}
	for k in [0..n){
		ψ[k] := H(ψ[k]);
		for l in [k+1..n){
			if ψ[l] && ψ[k]{
				phase(2·π · 2^(k-l-1));
			}
		}
	}
	return ψ;
}

def evalNand[V:qtype](
	N:!ℕ,
	r₂:V,
	isR₁:V!→lifted 𝔹,
    read:V!→lifted 𝔹,
	isLeaf: V!→lifted 𝔹,
	isInternal: V!→lifted 𝔹,
	walk: V×uint[2]!→mfree V×uint[2],
){
	τ:=320·floor(sqrt(N)) coerce !ℕ;
	n:=log₂(N);
	τ=2^n; // TODO: QFT on ℤ_N where N is not a power of two
	//t:=makeUniform(τ);
	t:=0:uint[n];
	for i in 0..n{ t[i]:=H(t[i]); }
	phaseQ((t[0],t[1]) as uint[2]):=(); // TODO: slicing for integers?
	v:=r₂;
	c:uint[2]:=left;
	for i in 0..τ{
		if i<t{
			// diffusion step
			if isLeaf(v){
				if read(v){ phase(π); }
			}else if isInternal(v){
				c:=refl₁(c);
			}else if isR₁(v){
				c:=refl₂[N](c);
			}
			// walk step
			(v,c):=walk(v,c);
		}
	}
	t:=reverse(QFT)(t);
	measure(v,c);
	t:=measure(t);
	return t=0||t=τ div 2;
}

def main(){
	//counter:=makeUniform(3);
	//phaseQ((counter[0],counter[1]) as uint[2]):=(); // TODO: slicing for integers?
	//return counter;
	//return reverse(zeroToW)(uniformToW(counter));
	//return uniformToW(counter);
	//counter:=1:uint[2];
	counter:=0:uint[2];
	θ:=2·asin(sqrt(1-1/sqrt(25)));
	counter[0]:=rotY(θ,counter[0]);
	return refl₂[25](counter);
}
