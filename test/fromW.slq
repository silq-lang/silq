// args: --run

def toW[n:!ℕ]lifted:𝔹^n →mfree 𝔹^n⇒lambda(qs:𝔹^n)mfree:𝔹^n{
	if n==1{ qs[0]:=X(qs[0]); }
	else if n>1{
		θ:=asin(1/sqrt(n));
		(([head] coerce 𝔹^1):𝔹[])~((tail coerce 𝔹^(n sub 1)):𝔹[]):=(qs:𝔹[]);
		head:=rotY(θ,head);
		if !head { tail := toW(tail); }
		qs:=[head]~(tail:𝔹[]) coerce B^n;
	}
	return qs;
};

def fromW[n:!ℕ]lifted:𝔹^n→mfree 𝔹^n⇒lambda(qs:𝔹^n)mfree:𝔹^n{
    if n = 1 {
        qs[0] := reverse(X)(qs[0]);
    } else if n > 1 {
        θ := asin(1 / sqrt(n));
        __tmp2 := qs coerce 𝔹[];
        (head,) := dup(__tmp2[0..1]) coerce 𝔹^1;
        tail := dup(__tmp2[1..__tmp2.length] coerce 𝔹^((n sub 1)));
        forget(__tmp2=[head] ~ (tail: 𝔹[]));
        if ¬head {
            tail := fromW(tail);
        }
        head := reverse(rotY)(θ,head);
        __tmp0 := dup((([head] coerce 𝔹 ^ 1): 𝔹[]) ~ ((tail coerce 𝔹 ^ (n sub 1)): 𝔹[]));
        forget(tail=(__tmp0[1..__tmp0.length]: 𝔹[]) coerce 𝔹 ^ (n sub 1));
        forget((head,)=(__tmp0[0..1]: 𝔹[]) coerce 𝔹 ^ 1);
        qs := __tmp0 coerce 𝔹^n;
    }
    return qs;
};

def solve(qs:𝔹^3):!𝔹{
	if qs[1]{ phase(-2·π/3); }
	if qs[2]{ phase(-4·π/3); }
	qs:=fromW(qs);
 	return measure(qs as int[3])!=0;
}
def main(){
	qs:=toW(vector(3,0:𝔹));
	if qs[1]{ phase(2·π/3); }
	if qs[2]{ phase(4·π/3); }
	assert(!solve(qs));
}
