// skipped

/+
def foo(){
	k:=3;
	while true {
		x:=0:uint[k];
		measure(x);
		if true{ return; }
	}
}
+/

/+
def foo(){
	k:=3;
	while true {
		x:=0:uint[k];
		if true{ return; }
	}
}
+/
/+
def main(){
	x:=2;
	if measure(H(0)){
		return 0;
	}else{
		x=3;
	}
	return 1;
}
+/

/+
def main(){
	__show(typeof(if measure(H(0)) then (a:!ℕ,b:!ℕ)⇒(vector(a,0),vector(b,0)) else (b:!ℕ,a:!ℕ)⇒(vector(b,0),vector(a,0))));
	__show(typeof(if measure(H(0)) then (a:!ℕ,b:!ℕ)wild⇒(vector(a,0),vector(b,0)) else (b:!ℕ,a:!ℕ)⇒(vector(b,0),vector(a,0))));
}
+/

/+
def intLt₃[n:!ℕ](x:𝔹^n,y:𝔹^n)lifted:𝔹{
    if n=0{ return false; }
	r := intLt₃(x[0..n sub 1],y[0..n sub 1]);
	res := if x[n-1]=y[n-1] then dup(r) else y[n-1];
	intLt₃(assert(0),assert(0)):=r; // TODO: better error message
	return res;
}
+/

/+
+/

/+
def f[n:!ℕ](xs:𝔹^n)⇒xs;

def main(){
	//f(xs):=[1,0,1];
	//xs:=reverse(f)([1,0,1]);
	x:=1:𝔹;
	1:B:=x;
}
+/
/+
def undup[T](const x: T, y: T) {
	dup(x) := y;
}
def main() {
	undup(0:B, H(x)) := ();                 // x := H(0:B);
	undup(x, y) := ();                      // y := dup(x)
	undup(measure(undup(y, x)), ()) := ();  // undup(y, x); // TODO
	return y;
}
+/

/+
def f(x:𝔹):⊥{ assert(0); }

def main(){
	f(x):=2;
	(a,)~f(b):=(1,2);
	return (x,b);
}
+/

/+
def foo():⊥{assert(0);}
def main(){
	foo():=2;
	//foo()~(foo():𝔹^2):=2;
}
+/

/+
def main(){
	x:=0:int[assert(0)];
}
+/

/+
def main(){
	x := [0:B,1:B];
	for i in [0..2) {
		if true{
			x[0] := H(x[0]);
		}
	}
	return x;
}
+/
/+
def main(){
	a:=[1,2,3];
	x:=vector(3,0);
	x[a]:=x[a];
}
+/
/+
def main() {
	x := 42:!uint[6];
	x[1] := H(x[1]);
	__show(__query("type", x)); // uint[6]
	return x;
}
+/
/+
def main(){
	x := (0:B, 0:!B, 0:!B);
	x[i] := H(x[i]);
	__show(__query("type", x)); // B^3
}
+/

/+
def main(){
	x:=vector(10, 0:B)[0..4];
	__show(typeof(x));
	y:=array(10, 0:B)[0..4];
	__show(typeof(y));
}
+/

/+
def constUse(const x:𝔹){}

def main(){
	x:=H(0); // x ↦ ⊤
	y:=dup(x); // x ↦ ⊤, y ↦ {x}
	z:=dup(y); // x → ⊤, y ↦ {x}, z ↦ {y}
	constUse(y); // last use of y
	x:=H(x); // y ↦ ⊤, z ↦ {y}
	constUse(z); // last use of z
	return x;
}
+/

/+
def foo(x:𝔹)mfree{
	def bar(i:!ℕ,x:𝔹)mfree:𝔹{
		if i=0{ r:=x; }
		else { r:= bar(i sub 1,X(x)); }
		return r;
	}
	return bar(11,x);
}
+/

/+
def rfoo(__tmp12:𝔹)mfree{
    def bar(moved i: ¬ℕ,moved x: 𝔹)mfree:𝔹{
        if i = 0 {
            r := x;
        } else {
            r := bar(i sub 1,X(x));
        }
        return r;
    }
    bar(10,x) := __tmp12;
    return x coerce 𝔹;
}

def main(){
	foo(x):=0:𝔹;
	//x:=rfoo(0:𝔹);
	return x;
}
+/

/+
def foo(p:𝔹)qfree{
	q:=0:𝔹;
	q:=if p then X(q) else q;
	p:=if q then X(p) else p;
	//forget(q);
	return (p,q);
}
+/

/+
def f(x:𝔹){
	return rotY(3·π/2,X(x));
	//return rotY(π/2,rotZ(π,x));
}

def main(){
	x := H(0:B);
	y := dup(x);
	y := H(f(y));
	forget(y=x);
	x := H(x);
	forget(x=0);
}
+/

/+
def foo(a:𝔹^5)mfree{
	//(u:𝔹^2)~(tmp0,)~(v:𝔹^1)~(tmp1,)~(w:𝔹^0) := a;
	i:=2,j:=4;
	with{
		if true{
			(u:𝔹^i)~(tmp0,)~(v:𝔹^(j sub (i+1)))~(tmp1,)~(w:𝔹^(5 sub (j+1))) := a;
		}else{
			(u:𝔹^i)~(tmp0,)~(v:𝔹^(j sub (i+1)))~(tmp1,)~(w:𝔹^(5 sub (j+1))) := a;
		}
	}do{}
	return (u,tmp0,v,tmp1,w);
}

def main(){
	return reverse(foo);
}
+/

/+
def main(){
	a:=(1,0,1,1,0):𝔹^5;
	i:=2,j:=4;
	with{
		if i < j {
			(u:𝔹^i)~(tmp0,)~(v:𝔹^(j sub (i+1)))~(tmp1,)~(w:𝔹^(5 sub (j+1))) := a;
		} else {
			(u:𝔹^j)~(tmp0,)~(v:𝔹^(i sub (j+1)))~(tmp1,)~(w:𝔹^(5 sub (i+1))) := a;
		}
	} do {}//(tmp0,tmp1):=(tmp1,tmp0);
	return a;
}
+/

/+
def foo(p:𝔹)qfree{
	q:=0:𝔹;
	q:=if p then X(q) else q;
	p:=if q then X(p) else p;
	//forget(q);
	return (p,q);
}
+/

/+
def f(x:𝔹){
	return rotY(3·π/2,X(x));
	//return rotY(π/2,rotZ(π,x));
}
+/

/+
def main(){
	x := H(0:B);
	y := dup(x);
	y := H(f(y));
	forget(y=x);
	x := H(x);
	forget(x=0);
}
+/

/+
def main(){
	return classical false;
}
+/

/+
def H_n[n:!ℕ](xs:𝔹^n)mfree: 𝔹^n {
	if n≠0 {
		with (h,)~t:=xs do {
			h := H(h);
			t := H_n(t);
		}
	}
	return xs;
}

def maj(x:𝔹,y:𝔹,z:𝔹)lifted => if x=y then y else z;

def dj(){
	xs := (0,0,0): 𝔹^3;
	with xs := H_n(xs) do {
		if maj(xs) {
			phase(π);
		}
	}
	return measure(xs)≠(0,0,0);
}

def main(){
	return dj();
}
+/

/+
def main(){
	xs:=vector(2,vector(2,0:𝔹));
	xs[0][1]=1:𝔹;
	//ys:=vector(2,0:𝔹);
	//(xs[0],xs[0][1]):=(xs[0],xs[0][1]); // error
	//(xs[0][1],xs[0]):=(xs[0][1],xs[0]); // error
	(xs[0][1],xs[1][0],1:𝔹):=(xs[1][0],xs[0][1],1:𝔹);
	return xs;
}
+/

/+
def main(){
	xs:=vector(2,0:𝔹);
	ys:=vector(2,0:𝔹);
	(xs[0],xs[1],ys[0],ys[1]):=(xs[0],ys[0],xs[1],ys[1]);
	return (xs,ys);}
+/

/+
def main(){
	(x:𝔹^3)~(y:𝔹^2):=(0,1,1,0,1):𝔹^5;
	return (x,y);
}
+/

/+
def main(){
	x:=H(0:𝔹);
	y:=H(dup(x));
	measure(y);
	return x;
}
+/

/+
def foo[n:!ℕ](xs:𝔹^n)mfree{
	xs[0]:=H(xs[0]);
	return xs;
}

def main(){
	foo(x,):=(0:𝔹,);
	return x;
}
+/

/+
def main(){
	xs:=vector(3,0:𝔹);
	xs[2]=xs[2]⊕(1:𝔹);
}
+/

/+
def sqrtmone(): !R {
	return (-1)^(1/2);
}

def main(){
	return sqrtmone();
}
+/

/+
def main(){
	x:=0:𝔹;
	_:=x;
	return _;
}
+/

/+
def main(){
	x:=0:Rat;
	x+=2:Nat;
}
+/

/+
def main(){
	t := (2, 3);
	z := t~t~t;
	(a,)~x~(b, c) := z;
	return (a, x, b, c);
}
+/

/+
def main(){
	return 1%0;
}
+/

/+
def main(){
	return 1e-10:!ℤ; // TODO: error
}
+/

/+
def main(){
	//if true then assert(false) else assert(false);
	x:=assert(false);
}
+/

/+
def x[cond:!𝔹,t1:*,t2:*](arg:(()qfree=>if cond { t1 } else { t2 })()) {
	return measure(arg); // TODO
}
+/

/+
def main(){
	x:=1:uint[2];
	//y:=true:𝔹 coerce uint[2];
	//return x+y;
	//return -2 sub -2;
	//return x^2;
	return -3&-5/2;
}
+/

/+
def pack4(w0: uint[16], w1: uint[16], w2: uint[16], w3: uint[16]) qfree: uint[64] {
	return ((w0 as B^16) ~ (w1 as B^16) ~ (w2 as B^16) ~ (w3 as B^16)) as uint[64];
}

def main() {
	num := 16902157913843545776 as !uint[64];
	pack4(k0, k1, k2, k3) := num;
	return (num, pack4(k0, k1, k2, k3));
}
+/


/+
def foo(const x:𝔹){
	__show(__query("dep",x));
}

def main(){
	n:=2+measure(H(0:𝔹));
	x:=vector(n,0:𝔹);
	for i in 0..n{ x[i]:=H(x[i]); }
}
+/
/+
def main(){
	/+x:=0:𝔹;
	y:=H(dup(x));
	z:=dup(y);
	y:=H(y);
	assert(measure(x=y));
	forget(y=x);
	return z;+/
	x:=H(0:𝔹);    // |0⟩+|1⟩
	tmp:=dup(x);  // |00⟩+|11⟩
	y:=H(tmp);    // |0+⟩+|1-⟩
		          // = |00⟩+|01⟩+|10⟩-|11⟩
	x:=H(x);      // |+0⟩+|+1⟩+|-0⟩-|-1⟩ = |00⟩+|10⟩+|01⟩-|11⟩+|00⟩-|10⟩-|01⟩+|11⟩
	              // = |00⟩+|11⟩
	return (x,y);
}
+/

/+
def main(){
	return -1:int[0];
}
+/

/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	y:=H(y);
	z:=0:𝔹;
	if y{
		z:=X(z);
	}
	H(y):=y;
	dump();
	assert(measure(y==x));
	forget(y=x);
	return (x,z);
}
+/

/+
def good(x:uint[8]){
	xt~(xh,):=x as 𝔹^8;
	x:=(xh,)~xt as uint[8];
	return x;
}

def bad(x:uint[8]){
	tmp:=dup(x);
	tmp+=x;
	(x,tmp):=(tmp,x);
	tt~(th,):=tmp as 𝔹^8;
	tmp:=(th,)~tt as uint[8];
	tmp-=x;
	forget(tmp=0);
	return x;
}

def main(){
	//return good(129:uint[8]);
	return bad(127:uint[8]);
}
+/

/+
def main(){
	x:=0:uint[1];
	x[0]:=H(x[0]);
	x*=2;
	return x;
}
+/
/+
def foo(){
	x:=();
	x=3;
	x=()=>2;
}
+/

/+
def main(){
	n:=20;
	r:=337;
	x:=floor((1/r)*2^n)/2^n;
	return approx(x,2^n);
	//return candidates(x);
}


def approx_iter(lim: !ℕ, v: !ℝ, p0: !ℕ, q0: !ℕ, p1: !ℕ, q1: !ℕ) qfree: !ℕ x !ℕ {
    k := floor(v) coerce !ℕ;
    p2 := k*p1 + p0;
    q2 := k*q1 + q0;
    if p2 > lim || q2 > lim {
        return (p1, q1);
    } else if v - k < 1 / lim {
        return (p2, q2);
    } else {
        return approx_iter(lim, 1 / (v-k), p1, q1, p2, q2);
    }
}

def approx(v: !ℝ, lim: !ℕ) qfree: !ℕ x !ℕ {
    if v <= 1/lim {
        return (0, 1);
    } else if v >= 1 - 1/lim {
        return (1, 1);
    } else {
        return approx_iter(lim, v, 0, 1, 1, 0);
    }
}
def candidates(q:!ℚ){ // // TODO: probably this can be improved
	res:=[]:!ℤ[];
	r:=to_cfrac(q);
	while r.length≠0{
		res~=[from_cfrac(r)[1]];
		r=r[0..r.length-1];
	}
	return res;
}
def to_cfrac(q:!ℚ){
	if q=0{ return [0:!ℤ]; }
	r:=[]:!ℤ[];
	nq:=1/q;
	while nq≠0{
		nq=1/nq;
		p:=floor(nq);
		nq-=p;
		r~=[p];
	}
	return r;
}
def gcdn(a:!ℕ,b:!ℕ):!ℕ⇒gcd(a,b) coerce !ℕ;
def gcd(a:!ℤ,b:!ℤ):!ℤ⇒if a=0 then b else gcd(b%a,a);
def reduce(a:!ℤ,b:!ℤ){ d:=gcd(a,b); return (a div d,b div d); }
def add(x:!ℤ^2,y:!ℤ^2)⇒reduce(x[0]·y[1]+x[1]·y[0],x[1]·y[1]);
def inv(a:!ℤ,b:!ℤ)⇒(b,a);
def from_cfrac(r:!ℤ[]):(!ℤ×!ℤ)⇒if r.length>1 then add((r[0],1),inv(from_cfrac(r[1..r.length]))) else (r[0],1);
+/

/+
def main(){
	return 2+(0:𝔹);
}
+/
/+
def foo[n:!ℕ](x:𝔹^n):ℤ{
	return foo(x);
}
+/
/+
def main(){
	return f(0:𝔹,0:𝔹,0:𝔹);
}
+/

/+
def main(){
	return H(Z(rotZ(π,H(0:𝔹))));
}
+/

/+
def main(){
	return 1e-10; // TODO
}
+/

/+
def main(){
	return 1.5:!ℚ;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	def f(x:𝔹):𝔹^1 ⇒ (x,);
	return f(x).length;
}
+/
/+
def main(){
	n:=5;
	//xs:=vector(n,0:𝔹);
	//with x:=xs[1] { x:=H(x); }
	x:=0:𝔹;
	with x:=H(x){
		x:=H(x);
	}
	return x;
}
+/
/+
k:=0;
def main(){
	forget(k);
	x:=k;
	def foo(){
		forget(x=0);
	}
	foo();
	foo();
}
+/
/+
def main(){
	x:=reverse(reverse);
}
+/
/+
def main(){
	return 3%-2;
}
+/
/+
def main(){
    program(f1);
    program(f2);
}

def program(f:𝔹!→mfree 𝔹){
    x:=0:𝔹;
    y:=f(dup(x));
    if y{
        x:=H(x);
    }
	dump();
    y:=reverse(f)(y);
	assert(measure(y=x));
	forget(y=x);
    dump();
    measure(x);
}

def f1(x:𝔹)mfree{
    return rotY(π/2,x);
}

def f2(x:𝔹)mfree{
    x:=Z(x);
    return rotY(π/2,x);
}
+/
/+
def f(x:𝔹)mfree⇒x;

def main(){
	x:=H(0:𝔹);
	y:=f(dup(x));
	if y{
		// ops
	}
	f(y):=y;
	assert(measure(y=x));
	forget(y=x);
	return x;
}
+/

/+
def f(x: 𝔹) mfree: 𝔹^2 {
	y := dup(x);
	// x := H(x);
	y := H(y);
	return (x, y);
}

def f'(x: 𝔹) mfree: 𝔹^2 {
	(x, y) := f(x);
	z := dup(y);
	f(x) := (x, y);
	return (x, z);
}

def main() {
	return f'(0:𝔹);
}
+/
/+

def main(){
	return 1%-2;
}
+/
/+
def main(){
	x:=0:𝔹;
	y:=0:𝔹;
	x:=H(x);
	if x{ phase(π); }
	x:=H(x);
	return (x,y);
}
+/
/+
def f(x: uint[10]) mfree {
	x' := (x * 3) % 29;
	forget(x = (x' * 10) % 29);
	x'[0] := H(x'[0]);
	return x';
}

def main() {
	for i in [0..29) {
		x := i as uint[10];
		x := f(x);
		if x!=28 {
			phase(pi/2);
		}
		f(x) := x;
		measure(x);
	}
}
+/
/+
def H(x:𝔹){
	x:=rotY(-π/4,x);
	if x{ phase(π); }
	x:=rotY(π/4,x);
	return x;
}
def main(){
	x:=1:𝔹;
	return H(1:𝔹);
}
+/

/+
import grover;
def main(){
	f:=(x:uint[8])lifted⇒x·3=15;
	return grover(f);
}
+/
/+def main(){
	x:=0:𝔹;
	φ:=2·asin(1/2);
	x:=rotY(φ,x);
	x:=H(x);
	if x=1{ phase(π); }
	x:=H(x);
	if x=1{ phase(π); }
	x:=H(x);
	return x;
	//return x;
	//return π/(4·asin(2^(-2/2)));
	/+x:=0:uint[2];
	for i in 0..2{ x[i]:=H(x[i]); }
	x[0]:=H(x[0]);
	x[1]:=H(x[1]);
	if x==3{ phase(π); }
	for i in 0..2{ x[i]:=H(x[i]); }
	if x!=0{ phase(π); }
	//for i in 0..2{ x[i]:=H(x[i]); }
	return x;+/
}
+/

/+
def f(x: B) mfree: B^2 {
	y := dup(x);
	y := H(y);
	return (x, y);
}
def main(){
	return reverse(f)(0:𝔹,1:𝔹);
}
+/

/+
def foo(x:𝔹)(y:𝔹)⇒(y,x);
def bar(z:𝔹)⇒z;

def main(){
	return foo(0:𝔹)(1:𝔹);
}
+/
/+
def main(){
	x:=0:!int[2];
	y:=0:!int[2];
	return x^y;
}
+/
/+
def main(){
	x:=0:𝔹;
	(y,z,w,t):=(1,0,0,0);
	for i in 0..10{
		(z,t,y,w)=(y/10,w,t,z);
		x:=H(x);
	}
	return x;
}
+/

/+
def main(){
	[a,(b,c)]:=[1,2]; // error
	return [a,b];
}
+/
/+
def main(){
	x:=vector(2,vector(2,0:𝔹));
	x[0]:=x[0]:𝔹[]; // error
}
+/
/+
x:=3;

def main(){
	//2+3:=(1,2);
	x:=3:uint[16];
	//():=forget(x=3);
	forget(x=3);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=H(0:𝔹);
	a:=measure(H(0:𝔹));
	b:=measure(H(0:𝔹));
	def foo(){
		//(x,y):=(x,y);
		if a{
			if b{
				t:=(x,y);
			}else{
				t:=(x,y);
			}
		}else{
			if b{
				t:=(x,y);
			}else{
				t:=(x,y);
			}
		}
		return t;
	}
	return foo;
}
+/
/+
def main(){
	x:=2;
	def foo()⇒x;
	return foo;
}
+/

/+
def solve[n:!ℕ](qs:𝔹^n){
	x:=measure(qs);
	return x;
}

def main(){
	return solve(0:𝔹,);
}
+/
/+
def min(x:!ℝ)lifted:!ℝ{
	r:=x;
	if true{
		r=2;
		__show(__query("type",r));
	}else{
		__show(__query("type",r));
		r=3;
	}
	return r;
}
+/

/+
def pad[a:!ℕ](x:uint[a],b:!ℕ)qfree⇒((x as 𝔹^a)~vector(b,0:𝔹)) as uint[a+b];
def powm[n:!ℕ,m:!ℕ](a:uint[n],b:uint[m])lifted: uint[2·n]{
	(r,x):=(1:uint[2·n], pad(a,n));
	for i in 0..m{
		__show(__query("dep",r));
		if b[i]{
			__show("1");
			__show(__query("dep",r));
			__show(__query("dep",x));
			r=r·x;
			__show(__query("dep",r));
			__show(__query("dep",x));
			__show("2");
		}else{
			__show("3");
			__show(__query("dep",r));
			__show(__query("dep",x));
			__show("4");
		}
		x=x·x;
	}
	return r;
}
+/
/+
def main(){
	x:=2;
	if true{
		x=3;
	}else{
		x=4;
	}
}
+/
/+
def main(){
	x:=();
	x:=move(x)~(0:𝔹,);
}
+/
/+
def bad(φ:!ℝ,_:𝟙)mfree⇒_;
def main(){
	__show(__query("type",bad));
	reverse(bad)(π/2,()):=();
}
+/

/+
def f(w: !Π[moved _:!ℕ]lifted. qtype){}
//def f[moved _:!ℕ]⇒int[_];
def main(){
	f(int);
	__show(__query("type",f));
}
+/

/+
def main(){
	x:=();
	():=x;
	return x;
}
+/

/+
def main(){
	x:=((x:𝔹)qfree⇒x)(true);
	__show(__query("type",x)); // !𝔹
	return x;
}
+/
/+
def fib₁[n:!ℕ](i: int[n])lifted:int[n] ⇒ if i≤2 then i else fib₁(i-2)+fib₁(i-1);
def fib₂[n:!ℕ](i: int[n])lifted:int[n]{
	(a,b):=(0,1):int[n]^2;
	j:=1:int[n];
	while true{
		if j<i{
			x:=dup(b);
			a+=x;
			(a,b):=(b,a);
			forget(x);
		}
		j=(j+(j<i));
	}
	r:=if i≤1 then i else dup(b);
	forget(a,b);
	return r;
}

def fibber(f: !Π[n:!ℕ]lifted. int[n] !→lifted int[n]×𝔹)[n:!ℕ](i:int[n])lifted: int[n]×𝔹{
	if i≤1{ return (i,true); }
	(a,a_ready):=f(i-2);
	(b,b_ready):=f(i-1);
	return (a+b,a_ready&b_ready);
}

def fib₃[n:!ℕ](i:int[n]): int[n]{
	fib:=[n:!ℕ](i:int[n])lifted⇒(0:int[n],false:𝔹);
	r:=0:int[n];
	done:=false;
	while !done{
		forget(r);
		fib=fibber(fib);
		(r,done):=fib(i);
		done:=measure(done);
		__show(__query("type",done));
	}
	return r;
}

def main(){
	return fib₃(10:int[10]);
}
+/
/+
def foo(){
	x:=H(0:𝔹);
	def bar(y:𝔹){
		x:=x;
		if y { x:=X(x); }
		return (x,y);
	}
	return bar;
}
def main(){
	return foo();
}
+/

/+
def main(){
	x:=(0:𝔹,);
	x[0]:=H(x[0]);
	__show(__query("type",qtype)); // ctype
	__show(__query("type",int[8]^3×int[10]^3)); // qtype
	return x;
}
+/

/+
def f(const a:int[1],b:int[2])mfree:int[3] × int[4]{
	forget(b=(0:int[2]));
	return (0:int[3], 0:int[4]);
}
+/

/+
def f(x:𝔹,)mfree⇒x;

def main(){
	__show(__query("type",reverse(f)));
}
+/

/+
def main(){
	for i in [0..10){
		f:=((const x:𝔹)⇒x+2): const 𝔹!→!ℕ;
	}
}
+/

/+
def main(){
	//def f()⇒2;
	//forget(f);
	return H(0:𝔹);
}
+/

/+
def main(){
	x:=((0,2):!int[2]^2) as !ℤ^2;
	return x;
}
+/

/+
def main(){
	r:=reverse;
	return r((const x:𝔹,y:𝔹)mfree⇒y); // TODO
}
+/

/+
def id(x:!ℕ)⇒x;

def main(){
	n:=3,m:=4;
	a:=5,b:=6;
	(n,(a,b))=(m,(b,a));
	return (n,(a,b));
}
+/

/+
def main(){
	i:=0;
	a:=(0,1):𝔹^2;
	b:=(0,1):𝔹^2;
	(a[i],a[i+1]):=(a[i],a[i+1]);
	return a;
}
+/

/+
k:=2;
def f2(x: int[32], y: int[32]){
	k := dup(x);
	forget(k);
	return (x,y);
}
+/

/+
def main(){
	n:=3;
	x:=vector(n,0:𝔹);
	c:=measure(H(0:𝔹));
	if c{
		forget(x);
		forget(n);
		n:=4;
		x:=vector(n,0:𝔹);
	}
	__show(__query("type",x));
	return (c,x);
}
+/

/+
def main(){
       q := vector(5, 0:𝔹);
       (q₀, q₁, q₂, q₃, q₄) := q;

       q₀:=X(q₀);
       q₂:=H(q₂);
       if q₂ { q₀ := X(q₀); }
       if q₂ { q₄ := X(q₄); }
       if q₄ & q₀{ q₂ := X(q₂); }
       if q₃ { q₁ := X(q₁); }
       if q₃ { q₂ := X(q₂); }
       if q₂ & q₁{ q₃ := X(q₃); }
       if q₂ & q₁{ q₃ := X(q₃); }
       if q₃ { q₂ := X(q₂); }
       if q₂ { q₁ := X(q₁); }
       if q₂ { q₀ := X(q₀); }
       if q₂ { q₄ := X(q₄); }
       if q₄ & q₀ { q₂ := X(q₂); }

       /+q₀ := X(q₀);
       if q₂ { q₀ := X(q₀); }
       if q₂ { q₄ := X(q₄); }
       if q₄ & q₀ { q₂ := X(q₂); }
       if q₃ { q₁ := X(q₁); }
       if q₃ { q₂ := X(q₂); }
       if q₂ & q₁ { q₃ := X(q₃); }
       if q₂ & q₁ { q₃ := X(q₃); }
       if q₃ { q₂ := X(q₂); }
       if q₂ { q₁ := X(q₁); }
       if q₂ { q₀ := X(q₀); }
       if q₂ { q₄ := X(q₄); }
       if q₄ & q₀ { q₂ := X(q₂); }+/

       q := (q₀, q₁, q₂, q₃, q₄);
       return q;
}
+/
/+
def foo(a:!ℕ)(b:!ℕ)⇒a+b+c;
+/
/+
def main(){
	x:=H(0:𝔹);
	if x{
		f:=()=>x; // error
	}
}
+/

/+
def main(){
	a:=vector(3,0:𝔹);
	__show(__query("dep",a));
	a[0]:=H(a[0]);
	__show(__query("dep",a));
	return a;
}
+/

/+
def foo(a:!ℕ)(b:!ℕ)⇒a+b;

def main(){
	return foo(1)(2);
}
+/
/+
def main(){
	f:=(x:!ℝ)⇒(-1/2≤x∧x≤1/2):!ℝ;
	for i in [0..1){
		d:=1/(2·i+1);
		f=(x:!ℝ)⇒f(x+d/2);
	}
	return f;
}
+/
/+
def rQFT[n:!ℕ](ψ: int[n])mfree{
    for k in (n..-1..0]{
        for l in (n..-1..k + 1]{
            if ψ[k] && ψ[l] {
                reverse(phase)(2 · π · 2 ^ (k - l - 1),());
            }
        }
        __tmp2 := ψ[k];
        __tmp2 := reverse(H)(__tmp2);
        ψ[k] := __tmp2;
    }
    for k in (n div 2..-1..0]{
        __tmp1 := ψ[n - k - 1];
        __tmp0 := ψ[k];
        (__tmp1,__tmp0) := (__tmp0,__tmp1)^2;
        ψ[n - k - 1] := __tmp1;
        ψ[k] := __tmp0;
    }
    return ψ coerce int[n];
}

def main(){
	return rQFT(0:int[2]);
}
+/

//a:=vector(3,0:𝔹); // TODO
//(x,y):=(1,2); // TODO
//a[0]:=a[0]; // error

/+
def main(){
	[x,y]:=(1,2/3);
	__show(__query("type",y));
}
+/

/+
def main(){
	x:=0:𝔹;
	y:=f(dup(x));
	if y {
		z:=1:𝔹;
	}else{
		z:=0:𝔹;
	}
	y:=reverse(f)(y);
	assert(measure(y=x));
	forget(y=x);
	return z;
}
+/

/+
def project0(x:𝔹){
	assert(measure(x=0));
	0:=x;
}
def project1(x:𝔹){
	assert(measure(x=1));
	1:=x;
}

def main(){
	x:=0:𝔹;
	y:=H(0:𝔹);
	assert(measure(x=y));
	dup(x):=y;
}

def main(){
	0:=H(0:𝔹);
	x:=1:𝔹;
	y:=H(dup(x));
	if y{
		z:=H(x);
	}else{
		z:=H(x);
	}
	y:=H(y);
	assert(measure(z==y));
	forget(y=z);
	return z;
}
+/

/+

def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	measure(dup(x));
	forget(y);
	return x;
}
+/
/+
def f(a: 𝔹){
	x:=!a; // x ↦ {a}
	y:=!x; // x ↦ {a}, y ↦ {x}
	if y {
		xp := dup(x); // xp ↦ {x}, x ↦ {a}, y ↦ {x}
		__show(__query("dep",xp));
		xp := H(xp);
		// y ↦ {x}, x ↦ {a}
	} else {
		xp := dup(x); // x=xp, y ↦ {x}, x ↦ {a}
		// x↦{xp}, y ↦ {x}, xp ↦ {a}
		a := H(a);
		// x ↦ {xp}, y ↦ {x}, xp ↦ {a}
	}
	// x ↦ {xp}, y → {xp}
	(x,xp) := (xp,x); // x → ⊤,
	// x ↦ {y, a, ap}, y ↦ {cond, x, xp}
	__show(__query("dep",y));
	forget(xp);
	return (x,a,y);
}
+/

/+
def f(a: B) {
	y := !a;
	y := X(y);
	a := H(a);
	__show(__query("dep",y));
	forget(y);
	return a;
}
+/

/+
def foo(x:𝔹,y:𝔹,n:!ℕ){
	(a,b):=(dup(x),dup(y));
	repeat n{
		(a,b):=(b,a);
	}
	__show(__query("dep",a)); // {y, x}
	__show(__query("dep",b)); // {y, x}
}
+/
/+
def main(){
	x:=1;
	y:=H(0:𝔹);
	if y{
	}else{
	}
	measure(y);
	return x;
}
+/
/+
def factored(const cond:𝔹,x:𝔹)mfree{
	if cond{
		x:=H(x);
	}else{
		//a:=H(a);
	}
	return (x);
}

def foo(a:𝔹,const cond:𝔹,const cond2:𝔹){
	if cond2 {
		x:=!a;
		y:=!x;
		if cond{
			x:=H(x);
			// forget(y=a);
		}else{
			a:=H(a);
			// forget(y=!x)
			//z:=x;
		}
		//(x):=factored(cond,x);
		__show(__query("dep",y));
		forget(y); // error
		return (a,x);
	}else{
		return (a,0:𝔹);
	}
}
+/

/+
def main(){
	x:=0:!ℂ;
	y:=1:!ℤ;
	return x^y;
}
+/

/+
def main(){
	foo(bar(x,y),z);
}
+/

/+
x:=foo()+y;
y:=2;

def foo():ℤ{ assert(false); }
+/

//(x,y):=(1,2);
//y:=x;

/+
def main(){
	return 764/382;
}
+/
/+
def main(){
	(x:!ℕ,y:!ℤ) := (-2,3);
}
+/
/+
def main(){
	x:=0:uint[(1,2.0).length];
	y:=x:uint[2];
}
+/
/+
def main(){
	//x:=(H(0:𝔹),H(1:𝔹),H(2:𝔹));
	//z:=H(0:𝔹);
	//y:=
	print(1,23);
	exit();
}
+/
/+
def main(){
	x:=(0:!𝔹,H(0:𝔹));
	x[1]:=H(x[1]);
	return x;
}
+/
/+
def main(){
	x:=(0,1/2);
	i:=0;
	return x[i];
}
+/
/+
def main(){
	x:=-2;
	return x^0:!ℕ;
}
+/
/+
def expensive_pure_computation()qfree⇒3;

def main(){
	x:=0:int[expensive_pure_computation()];
}
+/

/+
def main(){
	x:=(1,[2,3],4);
	y:=(3,4);
	return x~y;
}
+/
/+
def main(){
	x:=1:𝔹;
	//forget(x=3);
	reverse(dup[𝔹])(H(measure(x)),x);
	//return x;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=H(0:𝔹);
	forget((dup(x),dup(y))=(x,y));
	return (x,y);
}
+/
/+
def f(const x:𝔹)qfree⇒x;

def main(){
	x:=f(0:𝔹);
	y:=f(x);
	def foo(){
		y:=y;
		__show(__query("dep",y));
	}
}
+/

/+
def f₁(const z: 𝔹) qfree: 𝔹 {
	return !z;
}
def f₂() qfree: 𝔹^2 {
	return (0:𝔹, 0:𝔹);
}

def main() {
	x := H(0:𝔹);
	y := H(0:𝔹);
	a := 0:𝔹;
	b := 0:𝔹;
	c := 0:𝔹;
	if x {
		(a,b) = f₂();
		c = f₁(y);
	} else {
		a = f₁(y);
		(b,c) = f₂();
	}
	__show(__query("dep",a));
	__show(__query("dep",b));
	__show(__query("dep",c));
	forget(a,c);
	if b {
		y := X(y);
	} else {
		y := Z(y);
	}
	forget(b);
	return (x, y);
}
+/

/+
def main(){
	x:=1:*; // TODO?
}
+/
/+
def main(){
	//x:=2:!int[3];
	//return x: !ℕ;
	x:=2:Π(x:ℕ). ℕ;
}
+/
/+
def main(){
	x:=2:!ℂ;
	y:=abs(x);
	__show(__query("type",y));
	return x+2;
}
+/
/+
def main(){
	//x:=.0;
	//__show(__query("type",x));
	//x:=1+if true { 5 } else { 3 };
	//if false then def foo(){} else def foo() ⇒ 3;
	//x:=1+(x:=2);
	return foo();
}
+/
//y:=(1,2,3);
//a:=2;

/+
def main(){
	a:=vector(10,0:𝔹);
	(a[0],b):=(H(a[0]),1:𝔹);
	__show(__query("dep",a)); // ⊤
	__show(__query("dep",b)); // {}
	measure(a);
}
+/
/+
def main(){
	a:=vector(10,0:𝔹);
	a[0]:=H(a[0]);
	__show(__query("dep",a)); // ⊤
	measure(a);
}
+/
/+
def foo(x:𝔹,y:𝔹){
	//z:=dup(x);
	a:=dup(x);
	b:=dup(y);
	__show(__query("dep",a));
	__show(__query("dep",b));
	(a,b):=(b,a);
	__show(__query("dep",a));
	__show(__query("dep",b));
	//__show(__query("dep",z));
	return (x,y);
}
+/
/+
def foo(x:𝟙)⇒();

def main(){
	x:=();
	foo(x);
	return x:𝟙;
}
+/
/+
def wat[f: 𝔹!->qfree !ℕ,g: 1->qfree 𝔹](): (!𝔹^f(g()))[]{ // error
    return ();
}
def mi(x: 𝔹): !ℕ {
	r := measure(x) as !ℕ;
	print(r);
	return r;
}

def main(){
	x := H(0:𝔹);
	y := dup(x);
	wat[mi, lambda(). x]();
	return y;
}
+/
/+
def main(){
	x:=vector(5,0:𝔹);
	y:=H(x[0]);
	return (x,y);
}
+/
/*
def main(){
	q := 0:uint[n];
	anc := op(q, 0:B);
}
*/
/*
def main(){
	def bar(){
		x:=0:𝔹;
		def foo(x:𝔹){
			x:=x;
			return x;
		}
		return foo(x);
	}
	return bar();
}
*/
/+
def main(){
	return int[2^-1];
}
+/
/+
def foo(a:!ℕ)(b:!ℕ)⇒a+b+c;
+/

/+
def main(){
	x:=0:uint[10];
	y:=-1:int[10];
	return x<y;
}
+/
/+
def main(){
	return -4&-2;
}
+/

/+
def main(){
	x:=2:int[32];
	return x^2; // TODO: should work with exponent of type !ℕ
}
+/
/+
def main(){
	x:=0:classical B;
	x=0:𝔹;
}
+/

/+
def arrId(a: B[]) mfree: B[] {
	return a;
}

def doThenRev[T](f: T!->mfree T, val: T): T {
	return reverse(f)(f(val));
}

def main() {
	if measure(H(0:B)) {
		v := doThenRev[B[]](arrId, []: B[]);
	} else {
		v := []: B[];
	}
	return v;
}
+/
/+
def main(){
	x:=[]:(𝔹^2)[];
	y:=x coerce (𝔹^3)[];
}
+/
/+
def main() {
	a := [0:B];
	(x: B^1)~a := a;
	return (x,a);
}
+/
/+
def main(){
	x:=0:𝔹;
	v:=vector(measure(x),0:𝔹):*;
}
+/

/+
def wat[f: B!->!N,g: 1->B](): (!B^f(g()))[]{
    return ();
}

def mi(x: B): !N {
	r := measure(x) as !N;
	print(r);
	return r;
}

def main(){
	x := H(0:𝔹);
	y := dup(x);
	wat[mi, lambda(). x]();
	return y;
}
+/
/+
def wat[f: B!->!N, g: 1!->B](): (B^f(g()))[] {
	//return [vector(f(g()), 0:B)];
	return ();
}

def mi(x: B): !N {
	return measure(x) as !N;
}

def mkh(): B {
	return H(0:B);
}

def main() {
	return wat[mi,mkh]();
}
+/

/+
def sum[a,b] ⇒ Π[c](f: a!→c, g: b!→c). c;
def inl[a,b](x:a)[c](f: a!→c, g: b!→c)⇒f(x);
def inr[a,b](x:b)[c](f: a!→c, g: b!→c)⇒g(x);
def match[a,b,c](val: Π[c](f: a!→c, g: b!→c). c, f: a!→c, g: b!→c)⇒val(f,g);

def main(){
	x:=inl[𝔹,𝔹^2](H(0:𝔹)); // error
	y:=inr[𝔹,𝔹^2](H(0:𝔹),H(1:𝔹)); // error
}
+/

/+
def sum[a,b] ⇒ Π[c](f: a!→c, g: b!→c). c;
def inl[a,b](x:a)[c](f: a!→c, g: b!→c)⇒f(x);
def inr[a,b](x:b)[c](f: a!→c, g: b!→c)⇒g(x);
def match[a,b,c](val: Π[c](f: a!→c, g: b!→c). c, f: a!→c, g: b!→c)⇒val(f,g);

def main(){
	k:=H(0:𝔹);
	if k{
		x:=inl[𝔹,𝔹^2](H(0:𝔹)); // TODO
	}else{
		x:=inr[𝔹,𝔹^2](H(0:𝔹),H(1:𝔹));
	}
	//x:=inl[𝔹,𝔹^2](H(0:𝔹));
	//dump();
	//y:=inr[𝔹,𝔹^2](H(0:𝔹),H(1:𝔹));
	//measure(y);
	return match[𝔹,𝔹^2,!ℕ]( // TODO: should be able to infer
		x,
		(a:𝔹)⇒measure(a):!ℕ,
		(b:𝔹^2){ (u,v):=measure(b); return u+v; },
	);
	//dump();
}
+/

/+
def main()⇒(3,3)=(2,1);
+/
/+
def list[τ:*]⇒Π[a:*](nil: !a)(cons: !τ×!a!→lifted !a). a;
def nil[τ:*][a:*](nil:!a)(cons:!τ×!a!→lifted!a)lifted⇒nil;
def cons[τ:*](head:!τ,tail:!Π[a:*]lifted. !Π(nil: !a)lifted. !Π(cons: !τ×!a!→lifted!a)lifted. !a)[a:*](nil:!a)(cons:!τ×!a!→lifted!a)lifted⇒cons(head,tail[a](nil)(cons));
def foldr[τ:*,a:*](nil:!a,cons:!τ×!a!→lifted!a)(xs: !Π[a:*]lifted. !Π(nil: !a)lifted. !Π(cons: !τ×!a!→lifted!a)lifted. !a)lifted⇒xs[a](nil)(cons);
def len[τ:*]⇒foldr[τ,ℕ](0,(x:!τ,l:!ℕ)qfree⇒1+l);

def sum(xs: !Π[a:*]lifted. !Π(nil: !a)lifted. !Π(cons: !ℕ×!a!→lifted!a)lifted.!a)⇒foldr[ℕ,ℕ](0,(x:!ℕ,y:!ℕ)qfree⇒x+y)(xs);

def main()⇒sum(cons[!ℕ](2,cons[!ℕ](1,nil[!ℕ])));
+/
/+

def partition[n:!ℕ](xs: !ℕ^n,l:!ℕ,r:!ℕ,p:!ℕ){
	ys:=xs;
	q:=p;
	(ys[p],ys[r])=(ys[r],ys[p]);
	(i,j):=(l,r-1);
	done:=false;
	while !done{
		while i≤j && ys[i]<ys[r]{ i+=1; }
		while i≤j && ys[j]≥ys[r]{ j-=1; }
		if i>j { (ys[i],ys[r])=(ys[r],ys[i]); q=i; done=true; }
		else { (ys[i],ys[j])=(ys[j],ys[i]); i+=1, j-=1; }
	}
	return (ys,q);
}
def quickSelect[n:!ℕ](xs: !ℕ^n,l:!ℕ,r:!ℕ,k:!ℕ){
	p:=(l+r) div 2; // TODO: random
	(ys,t):=partition(xs,l,r,p);
	print(xs,ys,l,r,t);
	if t==k { return ys; }
	if t>k { return quickSelect(ys,l,t sub 1,k); }
	else { return quickSelect(ys,t+1,r,k); }
}

def main(){
	return quickSelect((1,2,3,4,0,5,6),0,6,6);
	//return quickSelect((0,1,0,1,0,0,0),0,6,2);
}
+/
/+
def foo(f: 𝟙→𝔹){
	if f(){}
}
+/
/+
def main(){
	x:=1:!int[5];
	y:=2:!int[5];
	return x div y;
}
+/
/+
def high_level[θ:!ℝ](ψ₀:𝔹,ψ₁:𝔹,cat:𝔹)mfree{
	if ψ₀∧ψ₁ ∨ ψ₀∧!cat ∨ ψ₁∧!cat { phase(2·θ); }
	cat⊕=ψ₀⊕ψ₁;
	return (ψ₀,ψ₁,cat);
}
+/
/+def high_level[θ:!ℝ](ψ₀:𝔹,ψ₁:𝔹,cat:𝔹)mfree{
	def tmp(ψ₀:𝔹,ψ₁:𝔹,cat:𝔹)lifted⇒ψ₀∧ψ₁ ∨ ψ₀∧!cat ∨ ψ₁∧!cat;
	forget(rotZ(2·θ,tmp(ψ₀,ψ₁,cat))=tmp(ψ₀,ψ₁,cat));
	cat⊕=ψ₀⊕ψ₁;
	return (ψ₀,ψ₁,cat);
}+/
/+
def low_level[θ:!ℝ](ψ₀:𝔹,ψ₁:𝔹,cat:𝔹)mfree{
	cat:=X(cat);
	ψ₁⊕=ψ₀;
	cat⊕=ψ₀;
	forget(rotZ(2·θ,ψ₀⊕(ψ₁∧cat))=ψ₀⊕(ψ₁∧cat));
	cat⊕=ψ₁;
	cat⊕=ψ₀;
	ψ₁⊕=ψ₀;
	cat:=X(cat);
	return (ψ₀,ψ₁,cat);
}
+/
/+
def dummy[θ:!ℝ](ψ₀:𝔹,ψ₁:𝔹,cat:𝔹)mfree{
	return (rotZ(θ,ψ₀), rotZ(θ,ψ₁), cat);
	//if ψ₀ { phase(θ); }
	//if ψ₁ { phase(θ); }
	//return (ψ₀,ψ₁,cat);
}
+/
/+
def main(){
	θ:=π/3;
	cat:=rotZ(θ,H(0:𝔹));
	(ψ₀,ψ₁):=(H(0:𝔹),H(1:𝔹));
	//measure(ψ₀,ψ₁);
	(ψ₀,ψ₁,cat):=dummy[θ](ψ₀,ψ₁,cat);
	(ψ₀,ψ₁,cat):=reverse(high_level[θ])(ψ₀,ψ₁,cat);
	return (H(ψ₀),H(ψ₁),H(rotZ(-θ,cat)));
	//measure(cat,ψ₁);
	//return (ψ₀);
	/*x:=0:𝔹;
	if x { phase(π); } else { phase(-π); }
	return x;//rotZ(-π,x);*/
}
+/
/+
def fib[n:!ℕ](const x: uint[n])qfree: uint[n]{
	if x <= 1 { return x; }
	else { return fib(x-1)+fib(x-2); }
}

def main(){
	k:=H(0:𝔹);
	return (fib((0:uint[4])+k),k);
}
+/

/+
import qftPretty;
def main(){
	n:=5;
	x:=0:uint[5];
	y:=13:uint[5];
	y[0]:=H(y[0]);
	//x:=QFT(x);
	for i in [0..n){ x[i]:=H(x[i]); }
	phaseQ(x*y);
	x:=reverse(QFT)(x);
	//forget(y=x);
	return (x,y);
}
+/
//def add[n:!ℕ](a:uint[n],b:uint[n])lifted⇒a+b;
/+
def add[n:!ℕ](a:uint[n],b:uint[n])lifted{
	c:=0:uint[n];
	carry:=0:𝔹;
	for i in [0..n){
		c[i]=a[i]⊕b[i]⊕carry;
		carry=a[i]&b[i]|a[i]&carry|b[i]&carry;
	}
	return c;
}

def main(){
	a:=13:uint[32];
	b:=24:uint[32];
	a[0]:=H(a[0]);
	b[1]:=H(b[1]);
	return (add(a,b),a,b);
}
+/
/+
import qftPretty;

def draper_mult_impl[n:!ℕ](const a: uint[n],const b: uint[n])mfree: uint[n]{
	φ:=QFT(0:uint[n]);
	for i in [0..n){
		for j in [0..n){
			if φ[i] && b[j]{ phaseQ(2^(i+j)·a); }
		}
	}
	return reverse(QFT)(φ);
}

def draper_mult[n:!ℕ](const a: uint[n],const b: uint[n])qfree: uint[n]{
	return (draper_mult_impl[n] pun const uint[n]×const uint[n]!→qfree uint[n])(a,b);
}

def main(){
	n:=3;
	i:=3, j:=2;
	a:=i as uint[3], b:=j as uint[3];
	c:=draper_mult_impl(dup(a),b);
	//forget(c=draper_add(dup(a),b));
	//k:=measure(draper_add(a,b));
	//assert((k as !uint[n])==(i*j as !uint[n]));
	return c;
}
+/

/+
import qft;

def draper_add_impl[n:!ℕ](a: int[n],const b: int[n])mfree: int[n]{
	a := QFT(a);
	for k in [0..n){
		for l in [0..n-k){
			if a[k] && b[l]{
				phase(2·π·2^(k+l-n));
			}
		}
	}
	return reverse(QFT)(a);
}

def draper_add[n:!ℕ](a: int[n],const b: int[n])qfree: int[n]{
	return (draper_add_impl[n] pun int[n]×const int[n]!→qfree int[n])(a,b);
}

def main(){
	for i in [-2^3..2^3){
		for j in [-2^3..2^3){
			a:=i as int[4], b:=j as int[4];
			c:=draper_add(dup(a),b);
			forget(c=draper_add(dup(a),b));
			k:=measure(draper_add(a,b));
			print(i,j,i+j,k,(i+j)%(2^4),k%(2^4),(-8)%16);
			assert(k%2^4==(i+j)%2^4); // TODO: investigate this
		}
	}
	dump();
}
+/
/+
def foo(a:!ℕ)(b:!ℕ)⇒a+b;

def main(){
	return foo(1)(2);
}
+/

/+
def higherRankedFunction(f: !Pi[a:*]. a!->a) => f([f(1),f(2)]);
def main() ⇒ higherRankedFunction([a:*](x:a)=>x);
+/
/+
def main(){
	x:=false;
	y:=false;
	if x {
		y=true;
	}else{
		y=false;
	}
	//y:=true;
	//return y;
}
+/
/+
def foo[n:!ℕ](xs:!ℕ^n,ys:!ℕ^n)lifted{
	print(n);
	return (xs,ys);
}

def main(){
	print(foo((1,2,3,4),(1,2,3,4)));
}
+/

/+
def zip[σ:*,τ:*,n:!ℕ](xs: σ^n, ys: τ^n)mfree: (σ×τ)^n {
	if n=0 {
		():=xs coerce σ^0;
		():=ys coerce τ^0;
		r:=() coerce (σ×τ)^n;
	} else {
		xs~(x,) := xs;
		ys~(y,) := ys;
		r := zip(xs,ys)~((x,y),);
	}
	return r;
	/*xs:=xs:σ[];
	ys:=ys:τ[];
	r:=[]:(σ×τ)[];
	for i in 0..n{
		(xs~(x,),ys~(y,)) := (xs,ys);
		r~=[(x,y)];
	}
	__show(__query("type",xs));
	():=xs;
	():=ys;
	return r coerce (σ×τ)^n;*/
}

def unzip[τ:*,n:!ℕ](x: (τ^2)^n){
	zip(x,y):=x;
	return (x,y);
}

def map[σ:*,τ:*](f: σ !→mfree τ)[n:!ℕ](xs: σ^n)mfree: τ^n{
	ys := []:τ[];
	xs := xs:σ[];
	for i in 0..n{
		(x,)~xs := xs;
		ys~=[f(x)];
	}
	//__show(__query("dep",xs));
	():=xs;
	return ys coerce τ^n;
	/+if n=0{
		():=xs coerce σ^0;
		r:=() coerce τ^n;
	}else{
		(x,)~xs := xs;
		r:=(f(x),)~map(f)(xs);
	}
	return r;+/
}

def add(x:!ℤ)(y:!ℤ) ⇒ x+y;

def main(){
	//return zip((1,2,3),(3,4,5));
	//zip(x,y) :=
	//return unzip((1,3),(2,4),(3,5));
	def mapzip[σ:*,τ:*,n:!ℕ,m:!ℕ]qfree ⇒ map(zip[σ,τ,n])[m];
	/*return mapzip(
		((1,2,3), (3,4,5)),
		((0,2,3), (5,4,5)),
	);*/
	//mapzip(x):=(((1,3),(2,4),(3,5)),((0,5),(2,4),(3,5)));
	//return x;
	return unzip((1,2),(3,4),(4,5));
}
+/

/+
def add[n:!ℕ](x: !ℤ^n, y: !ℤ^n){
	r := vector(n, 0:!ℤ);
	for i in 0..n{
		r[i]=x[i]+y[i];
	}
	return r;
}

def main(){
	n := 2+3*measure(H(0:𝔹))+measure(H(0:𝔹));
	x := vector(n, 0);
	y := vector(n, 0);
	return add(x,y):!ℤ[];
}
+/
/+
def f[T:*](x:T){
	return x;
}

def main(){
	//x := 4;
	//return f(x);
	return (1,2):!ℤ^2;
}
+/

/+
def main(){
	return 30 % -40;
}
+/
/+
def makeTeleporter(){
	shared₀:=H(0:𝔹);
	shared₁:=dup(shared₀);
	def send(message:𝔹){
		shared₀:=shared₀;
		shared₀⊕=message;
		return measure(H(message),shared₀);
	}
	def receive(p:!𝔹,f:!𝔹){
		shared₁:=shared₁;
		if p && shared₁ { phase(π); }
		if f { shared₁:=X(shared₁); }
		return shared₁;
	}
	return (send,receive);
}

def main(){
	(send,receive):=makeTeleporter();
	//return (send,receive);
	x:=send(H(1:𝔹));
	return receive(x);
}
+/
/+
def deutsch(f: 𝔹×𝔹 → 𝔹×𝔹){
	x:=H(0:𝔹);
	anc:=H(1:𝔹);
	(x,anc):=f(x,anc);
	measure(anc);
	return x;
}

def main(){

}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=H(0:𝔹);
	return x;
}
+/
/+
def deutsch(f: 𝔹 !→lifted 𝔹){
	x:=H(0:𝔹);
	y:=H(1:𝔹);
	if f(x){ phase(π); }
	return measure(H(x));
}
+/
/+
def func[n:!ℕ](const p:B, q:uint[n]){
    if p {
        q = 3:uint[n];  // Error: cannot reassign quantum variable
    }
    return q;
}
+/
/*
def main(){
	q := 0:uint[n];
	anc := op(q, 0:B);
}
*/
/*
def main(){
	def bar(){
		x:=0:𝔹;
		def foo(x:𝔹){
			x:=x;
			return x;
		}
		return foo(x);
	}
	return bar();
}
*/
/+
def main(){
	return int[2^-1];
}
+/
/+
def foo(a:!ℕ)(b:!ℕ)⇒a+b+c;
+/
/+
def main(){
	//x:=(1,1):𝔹 x 𝔹;
	x:=uint;
	return x[3];
}
+/
//def main()⇒measure(H(0:𝔹));

/+
def main(){
	n:=3,m:=3;
	x:=vector(n,vector(m,0:𝔹));
	(x[1],x[1][2],x[2][1],x[2]):=(x[2],x[2][1],x[1][2],x[1]);
}
+/

/+
def map[a,b,n:!ℕ](f: a!→mfree b, xs: a^n)mfree: b^n{
	if n==0{ forget(xs=()); result := () coerce b^n; }
	else { (x,)~xs:=xs; result := (f(x),)~map(f, xs); }
	return result;
}

def zip[a,b,n:!ℕ](xs:a^n,ys:b^n)qfree:(a×b)^n{
	xs:=xs:a[];
	ys:=ys:b[];
	r:=[]:(a×b)[];
	repeat n{
		(x,)~xs:=xs;
		(y,)~ys:=ys;
		r~=[(x,y)];
	}
	return r coerce (a×b)^n;
}

def unzip[a,b,n:!ℕ](xs:(a×b)^n)qfree:a^n×b^n{
	xs:=xs:(a×b)[];
	rs:=[]:a[];
	qs:=[]:b[];
	repeat n{
		((r,q),)~xs:=xs;
		rs~=[r];
		qs~=[q];
	}
	return (rs,qs) coerce a^n×b^n;
}

def W(a:𝔹,b:𝔹)mfree{
	a:=H(a);
	a⊕=b;
	b:=H(b);
	b⊕=a;
	return (a,b);
}

n:=2;
def main(){
	x:=0:uint[n];
	// do some stuff to x
	y:=0:uint[n];
	// do some stuff to y
	(x,y):=unzip(map(W, zip(x as 𝔹^n,y as 𝔹^n))) as int[n]^2;
	return (x,y);
}
+/

/+
def map[a,b,n:!ℕ](f: a!→mfree b, xs: a^n)mfree: b^n{
	if n==0{ forget(xs=()); result := () coerce b^n; }
	else { (x,)~xs:=xs; result := (f(x),)~map(f, xs); }
	return result;
}
def concatenate[a,m:!ℕ,n₁:!ℕ,n₂:!ℕ](xss: (a^n₁)^m, yss: (a^n₂)^m)qfree: (a^(n₁+n₂))^m{
	if m == 0{
		forget(xss=());
		forget(yss=());
		return () coerce (a^(n₁+n₂))^m;
	}
	(xs,)~xss:=xss;
	(ys,)~yss:=yss;
	return (xs~ys,)~concatenate(xss,yss);
}

def transpose[a,m:!ℕ,n:!ℕ](xss:(a^n)^m)qfree:(a^m)^n{
	if m == 0 {
		forget(xss=());
		result:=vector(n,():a^0) coerce (a^m)^n;
	}else if m == 1{
		(xs,)~xss:=xss;
		forget(xss=());
		r:=[]:(a^1)[];
		xs:=xs:a[];
		for i in 0..n{
			(x,)~xs:=xs;
			r~=[(x,)];
		}
		forget(xs=());
		result:=r coerce (a^m)^n;
	}else{
		(xs,)~xss:=xss;
		result:=concatenate(transpose(xs,),transpose(xss));
	}
	return result;
}
+/

/+
n := 2;
def main(){
	x:=0:uint[n];
	// do some stuff to x
	y:=0:uint[n];
	// do some stuff to y
	for i in 0..n{
		// move (x[i], y[i]) out of array:
		(a,b) := (x[i],y[i]):𝔹^2;
		x[i] := CNOT(a,x[i]);
		y[i] := CNOT(b,y[i]);
		// apply gate
		(a,b) := W(a,b);
		// move (a,b) back into array:
		x[i] := CNOT(a,x[i]);
		y[i] := CNOT(b,y[i]);
		forget((a,b)=(x[i],y[i]));
	}
	return (x,y);
}
+/

/+
def foo[n:!ℕ](xs:ℝ^n){
	return xs;
}

def bar[n:!ℕ,m:!ℕ](xs:ℝ^n,ys:ℝ^m):ℝ^(n+m){
	return xs~ys;
}

def main(){
	//return foo[4](1,2,3,4);
	return bar((1,2),(3,4,5));
}
+/

/+
def main(){
	return rotY(π/4,0:𝔹);
}
+/
/+
n:=10;
def main(){
	x:=vector(n sub 1,0:𝔹);
	/+for i in 0..n-1{ x[i]:=H(x[i]); }
	y:=1:𝔹;
	for i in 0..n-1{ y⊕=x[i]; } }
	x:=x~(y,);
	for i in 0..n{ x[i]:=H(x[i]); }+/
	y:=H(0:𝔹);
	for i in 0..n{ x[i]:=CNOT(y,x[i]); }
	x:=x~(y,);
	return x;
}
+/

/+
def x1_xor_xn[n:!ℕ](x:𝔹^n)lifted⇒x[0]⊕all(x[1..n]);

def main(){
	x:=-1 sub -2 coerce !ℕ;
	return x1_xor_xn();
}

def all[n:!ℕ](x:𝔹^n)lifted{
	r:=1:𝔹;
	for i in 0..n{ r&=x[i]; }
	return r;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	return CNOT(dup(x),x);
}
+/

/+def deutsch(f: 𝔹 !→lifted 𝔹){
	x:=H(0:𝔹);
	if f(x){ phase(π); }
	return measure(H(x));
}+/
/+def main(){
	x:=vector(6,0:𝔹);
	return x;
}
+/

/+
def main[n:!ℕ](){
	return (𝔹, int[n]):*^2;
}
+/
/+
def main(){
	x≔1;
}
+/
/+
def main(){
	x:=1:𝔹;
	y:=dup(x);
	//return (x,Z(y));
	dump();
	return (x,y);
}
+/
/+
def main(){
	//return H(0:𝔹,1:𝔹,0:𝔹);
	x:=(0:𝔹,1:𝔹,0:𝔹);
	//x[0,1]:=H(x[0,1]);
	return x[0,2,1];
}
+/
/+
def builder2(const a:𝔹) {
    def f2()const: 𝔹{
        return a;
    }
    return f2;
}+/
/+
def main(){
	a:=(1:𝔹,H(0:𝔹),1:𝔹);
	i:=1:uint[2];
	measure(a[i]);
	return (a[i],a,i);
}
+/
/+
def foo[n:!ℕ](x:!𝔹^n):!ℕ⇒n;

def main(){
	return foo(false,false,false);
}
+/

//import codeforces.winter19.contest.b1;

/+
def main(){
	i:=H(0:𝔹);
	x:=array(2,0:𝔹);
	x[0] = if i==0 then 1:𝔹 else 0:𝔹;
	k:=if x[0] then 0:𝔹 else 1:𝔹;
	return (x,i,k);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	return ((measure(0)+1)+(x as int[3]),x); // TODO
}
+/
/+
def main(){
	x:=array(2,0:𝔹);
	i:=H(0:𝔹);
	x[i]=1:𝔹;
	forget(i=x[1]);
	return x;
}
+/
/+
def main(){
	x:=array(2,0:uint[2]);
	i:=H(0:𝔹);
	j:=H(0:𝔹);
	x[i][j]=1:𝔹;
	forget(i=if x[0][0]|x[0][1] then 0:𝔹 else 1:𝔹);
	forget(j=if x[0][0]|x[1][0] then 0:𝔹 else 1:𝔹);
	return x;
}
+/
/+
def main(){
	x:=array(2,vector(2,0:𝔹));
	i:=H(0:𝔹);
	j:=H(0:𝔹);
	x[i][j]=1:𝔹;
	forget(i=if x[0][0]|x[0][1] then 0:𝔹 else 1:𝔹);
	forget(j=if x[0][0]|x[1][0] then 0:𝔹 else 1:𝔹);
	return x;
}
+/

/+
def foo(const x:𝔹):!ℕ{
	return if x then 0 else 1; // error
}
+/
/+
def solve(f: 𝔹^2 !→lifted 𝔹){
	x:=vector(1,0:!𝔹);
	return x==vector(1,0:𝔹);
}
def main(){
	g := λ[n:!ℕ](x: 𝔹^n)lifted⇒0:𝔹;
	f := g[2];
	x:=solve(f);
	y:=solve(f);
	return (x,y);
}
+/
/+
def solve(f: 𝔹^0 !→lifted 𝔹){
	x:=vector(1,0:𝔹);
	return measure(x)==vector(1,0:𝔹);
}
def main(){
	g := λ[n:!ℕ](x: 𝔹^n)lifted⇒0:𝔹;
	x:=solve(g[0]);
	return x;
}
+/
/+
def main(){
	x:=(1,2);
	//y:=H(0:𝔹) as int[2]; // TODO
	yb:=H(0:𝔹);
	y:=if yb then 1:int[2] else 0:int[2];
	forget(yb=if y==1 then 1:𝔹 else 0:𝔹);
	x[y]=3; // error
	return y;
}
+/
/+
def main(){
	x:=0:𝔹;
	forget(x=0);
}
+/
/+
def main(){
	n:=measure(H(0:𝔹)):!ℕ;
	def foo(){
		x:=0:int[n];
		return x;
	}
	y:=0:int[n];
	n=3; // error
	x:=measure(foo()) as !ℤ;
	return x;
}
+/
/+import codeforces.summer18.contest.a3; // TODO: make compile without type annotation
def main(){
	return solve((false,true,true),(false,true,false));
}
+/

/+
def main(){
	x:=H(false);
	if x{
		y:=2:int[3];
	}else{
		y:=3:int[3];
	}
	forget(x=y==2);
	return y;
}
+/
/+
def main(){
	bits:=(true,false,true);
	x:=H(0:𝔹);
	if x { qs₁ := bits:𝔹^3; }else{ qs₁ := vector(3,0:𝔹); }
	qs₂ := if x then bits else vector(3,0:𝔹);
	forget(x=qs₁[0]);
	forget(qs₂=qs₁);
	return qs₁;
}
+/
/+
def main(){
	x:=2:!uint[10];
	y:=dup(x);
	(x[0],x[1])=(x[1],x[0]);
	return x;
}
+/
/+
def main(){
	x:=2:uint[10];
	(x[0],x[1]):=(x[1],x[0]);
	return x;
}
+/
/+
def main(){
	x:=0:!uint[10];
	x[5]=1:!𝔹;
	return x;
}
+/
/+
def main(){
	(x,a):=(0:𝔹,[1:𝔹]);
	(x,a[0]):=(a[0],x);
	return (x,a);
}
+/
/+
def main(){
	return H(reverse(reverse(H))(0:𝔹));
}
+/
/+
def main(){
	x:=vector(1,0:int[1]);
	x[0][0]:=H(x[0][0]);
	return x;
}
+/
/+
def solve[n:!ℕ](bits: !𝔹^n){
	x:=H(0:𝔹);
	qs := if x then bits else (0:int[n]) as 𝔹^n;
	forget(x=qs[0]);
	return qs;
}
// import codeforces.summer18.contest.a2;

def main(){
	return solve((1,0,0,1,0,1):!𝔹^6);
}
+/
/+
import codeforces.summer18.contest.a1;
def main(){
	return solve(3);
}
+/
/+
def main(){
	x:=0:int[1];
	x[0]:=H(x[0]);
	x[0]:=H(x[0]);
	return x;
}
+/
/+
def main(){
	x:=[]:𝔹[];
	y:=H(0:𝔹);
	x~=[y];
	x[0]:=H(x[0]);
	return x;
}
+/
/+
def main(){
	x:=vector(1,0:𝔹);
	x[0] := H(x[0]);
	x[0] := H(x[0]);
	return x;
}
+/
/+
def array2vec[n:!ℕ][τ](a: τ[])qfree:τ^n{ // TODO
	assert(a.length==n);
	if n==0{ return (); } // TODO
	return array2vec[n div 2](a[0..n div 2])~array2vec[(n+1) div 2](a[n div 2..n]); // TODO
}
+/
/+
def main(){
	assert(1:!𝔹);
}
+/
/+
def main(){
	x:=dup((vector(3,1:𝔹) as int[3]) as 𝔹^3);
	return x;
}
+/
/+
def main(){
	x:=(vector(3,1:𝔹) as int[3]) as 𝔹^3;
	return x;
}
+/
/+
def main(){
	x:=((vector(3,1:𝔹) as int[3]) as 𝔹^3):𝔹[];
	return x;
}
+/
/+
def main(){
	x:=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16):int[4]^16;
	return x;
}
+/
/+
def main(){
	//x:=2:!int[2];
	//y:=x:!ℤ;
	x:=(0:int[3]);
	x[1]:=H(x[1]);
	y:=x as 𝔹^3;
	return y;
}
+/
/+
def main(){
	x:=-3:int[3];
	x+=3;
	return x;
}
+/
/+
def main(){
	x:=0:int[2];
	y:=0:int[3];
	z:=x+y; // error
}
+/
/+
def f(const x:𝔹)lifted⇒dup(x);

def main(){
	y:=f(measure(H(0:𝔹)));
	//__show(__query("dep",y));
}
+/
/+
def foo(const x:𝔹){
	y:=0:𝔹;
	z:=1:𝔹;
	if x{
		return y;
	}else{
		return z;
	}
}

def main(){
	return foo(1:𝔹);
}
+/
/+
def main(){
	x:=0:𝔹;
	y:=0:𝔹;
	while(measure(H(0:𝔹))){ // error
		x=H(y);
	}
	return x;
}
+/
/+def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	while(measure(H(0:𝔹))){ // error
		forget(y);
	}
	return H(x);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	while(measure(x)){
		forget(y=true);
		x:=H(0:𝔹);
		y:=dup(x);
	}
	return y;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	while(measure(H(0:𝔹))){
		y:=dup(x);
	}
	return H(x);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	if x{
		y:=dup(x);
	}else{
		z:=dup(x);
	}
	return H(x);
}
+/
/+def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	z:=measure(H(0:𝔹));
	if z{
		forget(y=dup(x));
	}
	return (z,H(x));
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=0:𝔹;
	return (if x then y else H(y), x);
}+/
/+
def main(){
	x:=H(0:𝔹);
	for i in [0..10){
		y:=dup(x);
	}
	return x;
}
+/
/+def main(){
	x:=H(0:𝔹);
	repeat 10{
		y:=dup(x);
	}
	return H(x);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	if true{
		y:=dup(x);
		//forget(y);
	}
	return H(x);
}
+/
/+def main(){
	x:=H(0:𝔹);
	if true{
		y:=dup(x);
		//forget(y=dup(x));
	}
	r:=H(x);
	return r;
}+/
/+
def main(){
	x:=0:𝔹;
	if x{ x:=X(x); } // error
}
+/
/+
def foo[n:!ℕ](const a:int[n],b:int[n]){
	b+=a;
	return b;
}
def bar[n:!ℕ](a:int[n]){
	foo(a,a); // error
	return a;
}
+/
/+
def add[n:!ℕ](a:int[n],b:int[n]){
	return (a+b,a,b); // ok
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	x⊕=x;
	return (x,y);
}
+/

/+
def main(){
	x:=[H(0:𝔹)];
	y:=dup(x);
	return (x,y);
}
+/
/+
def main(){
	x:=[]:𝔹[];
	x:=x~[H(false)];
	y:=dup(x)~[H(false)];
	/*x~=[H(0:𝔹)];
	y:=dup(x);
	y~=[H(0:𝔹)];*/
	return (x,y);
}
+/
/+
def main(){
	x := 0: int[32];
	a := []: 𝔹[];
	for i in [0..10){ a~=[H(false)]; }
	for i in [0..10){ x+=a[i]; }
	x:=measure(x);
	return a;
}
+/
/+
def main(){
	f:=(x:𝔹)qfree⇒ x;
	x:=H(0:𝔹);
	y:=dup(x);
	z:=f(y);
	forget(z);
	y:=dup(x);
	z:=dup(f(y));
	forget(z);
	a:=0:!𝔹;
	b:=f(a);
	b=a;
	return x;
}
+/
/+
def solve(){
	(q₀,q₁):=(1:𝔹,1:𝔹);
	while measure(q₀&q₁){
		measure(q₀,q₁);
		(q₀,q₁):=(H(0:𝔹),H(0:𝔹));
	}
	return (q₀,q₁);
}
+/
/+
def main(){
	φ:=2*asin(0.5);
	return rotY(φ,0:𝔹);
}
+/
/+def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	y=0:𝔹;
	return H(x);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	if true{
		y:=dup(x);
	}
	return H(x); // TODO: ∣0⟩
}
+/
/+def main(n:!ℕ){
	qs:=vector(n,vector(n,0:𝔹));
	def f[a](x:a)⇒x;
	for i in [0..n){
		for j in [0..n){
			(qs[i],qs[j]):=(qs[j],qs[i]);
		}
	}
}
+/
/+
def solve(n:!ℕ){
	qs:=vector(n,0:𝔹);
	for i in [0..n){ qs[i]:=H(qs[i]); }
	return qs;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	z:=dup(y);
	forget((y,z)=(x,x));
	y:=dup(x);
	z:=dup(y);
	forget(y,z);
	forget(H(x)=0:𝔹);
}
+/
/+
def main(){
	f:=[a]⇒reverse(dup[a]);
	f=3;
}
+/
/+
def main(){
	def id(x:𝔹)lifted⇒dup(x);
	x:=H(0:𝔹);
	id(x);
	x:=H(x);
	return x;
}
+/
/+
def main()qfree{
	def foo(x:𝔹,const y:𝔹)qfree⇒x;
	return reverse(foo)(0:𝔹,0:𝔹);
}
+/
/+
import grover;
def main()⇒grover((x:uint[6])lifted⇒x==42);
+/
/+def main(){
	return 2 sub 1;
}+/
/+
import conv;
def main(){
	x:=vector(3,0:𝔹);
	for i in [0..3){ x[i]:=H(x[i]); }
	for i in [0..round(π/4*sqrt(2^3))){
		if ([n:!ℕ]⇒reverse(toVecU[n]))(dup(x))==5{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
		if ([n:!ℕ]⇒reverse(toVecU[n]))(dup(x))==0{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
	}
	return measure(toUint(x));
}
+/
/+
import conv;
def main(){
	x:=vector(3,0:𝔹);
	for i in [0..3){ x[i]:=H(x[i]); }
	for i in [0..round(π/4*sqrt(2^3))){
		if toUint(dup(x))==5{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
		if toUint(dup(x))==0{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
	}
	return measure(toUint(x));
}
+/
/+
def main(){
	x:=0:uint[3];
	for i in [0..3){ x[i]:=H(x[i]); }
	for i in [0..floor(π/4*sqrt(2^3))){
		if x==5{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
		if x!=0{ phase(π); }
		for k in [0..3){ x[k]:=H(x[k]); }
	}
	return measure(x)==5;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	def f(g: 𝔹→qfree 𝔹)qfree{
		return g(x);
	}
	return H(f((x:𝔹)qfree⇒x));
}
+/
/+
def id[a](x:a)qfree⇒x;

def main(){
	//x:=([a]qfree⇒reverse(id[a]))(id);
	//f:=id;
	y:=0:𝔹;
	x:=id(y);
	//__show(__query("dep",x));
}
+/
/+
def uniform_entangle[n:!ℕ](bits:(!𝔹^n)^4)mfree{
    anc:=0:int[2];
    for j in [0..2){ anc[j]:=H(anc[j]); }
	qs:=vector(n,false:𝔹);

    for i in [0..n-1] {
        for a in [0..3] {
            if anc == a && bits[a][i] {
                qs[i] := X(qs[i]);
            }
        }
    }
    return (anc, qs);
}

def rev_entangle[n:!ℕ](bits:(!𝔹^n)^4, r:int[2]×𝔹^n)mfree{
	(anc,qs) := r;
    for i in [n - 1..-1..0]{
        for a in [3..-1..0]{
            if anc = a && bits[a][i] {
                qs[i] := X(qs[i]);
            }
        }
    }
    forget(qs=vector[𝔹](n,0: 𝔹));
    for j in (2..-1..0]{
        anc[j] := H(anc[j]);
    }
    forget(anc=0: int[2]);
    return ();
}

def solve[n:!ℕ](bits:(!𝔹^n)^4) {
    (anc, qs) := uniform_entangle(bits);
    //result := dup(qs);
    reverse(uniform_entangle[n])(bits, (anc, qs));
	//rev_entangle(bits, (anc, qs));
    //return result;
}

def main(){
	return solve(((0,0,0),(1,0,0),(0,1,0),(0,0,1)):!(𝔹^3)^4);
}
+/
/+
def solve[n:!ℕ](bits:(!𝔹^n)^4){
    anc:=0:uint[2];
    for j in [0..2){ anc[j]:=H(anc[j]); }
    qs:=(bits:(𝔹^n)^4)[anc];
	for j in [0..3] {
		if qs==bits[j]{
			anc⊕=j;
		}
	}
	forget(anc=0:uint[2]);
    return qs;
}
def main()⇒solve(((0,0,0),(1,0,0),(0,1,0),(0,0,1)):!(𝔹^3)^4);
+/
/+
def main(){
    anc:=0:int[1];
    for j in [0..1){ anc[j]:=H(anc[j]); }
	for j in [0..1){ anc[j]:=H(anc[j]); }
    return forget(anc=0: int[1]);
}
+/
/+
def main(){
	/+x:=0:!int[3];
	x[0]=!x[0];
	x[1]=1:!𝔹;+/
	y:=0:int[3];
	//y[0]:=H(y[0]);
	y[0]=1:𝔹;
	//return (x,y);
	return y;
}
+/
/+
def solve[n:!ℕ](f: 𝔹^n !→lifted 𝔹){
	x:=0:int[n];
	for i in [0..n){ x[i] := H(x[i]); }
	if f(x as 𝔹^n){ phase(π); }
	for i in [0..n){ x[i] := H(x[i]); }
	return measure(x)==0;
}
//import codeforces.summer18.warmup.i;
def main(){
	f := λ[n:!ℕ](x: 𝔹^n)lifted{
		r:=0:𝔹;
		for i in [0..n){
			r⊕=x[i];
		}
		return r;
	};
	g := λ[n:!ℕ](x: 𝔹^n)lifted⇒0:𝔹;
	x:=solve(f[1]);
	y:=solve(g[1]);
	return (x,y);
}
+/
/+
def solve[n:!ℕ](f: 𝔹^n !→lifted 𝔹){
	x:=vector(n,0:𝔹);
	for i in [0..n){ x[i] := H(x[i]); }
	if f(x){ phase(π); }
	for i in [0..n){ x[i] := H(x[i]); }
	return measure(x)==vector(n,0:!𝔹);
}
//import codeforces.summer18.warmup.i;
def main(){
	f := λ[n:!ℕ](x: 𝔹^n)lifted{
		r:=0:𝔹;
		for i in [0..n){
			r⊕=x[i];
		}
		return r;
	};
	g := λ[n:!ℕ](x: 𝔹^n)lifted⇒0:𝔹;
	x:=solve(f[1]);
	y:=solve(g[1]);
	return (x,y);
}
+/
/+def solve(f: 𝟙 !→ 𝟙){
	return (0:!𝔹)==(0:𝔹);
}
def main(){
	g := λ()()⇒();
	x := solve(g());
	y := solve(g());
	return (x,y);
}
+/
/+
def main():!𝔹×!𝔹{
	a:=vector(1,0:!𝔹);
	x:=a==vector(1,0:!𝔹);
	b:=vector(1,0:!𝔹);
	y:=b==vector(1,0:!𝔹);
	return (x,y);
}
+/
/+
def solve(f: 𝔹^1 !→lifted 𝔹){
	x:=vector(1,0:!𝔹);
	return x==vector(1,0:𝔹);
}
def main(){
	g := λ[n:!ℕ](x: 𝔹^n)lifted⇒0:𝔹;
	x := solve(g[1]);
	y := solve(g[1]);
	return (x,y);
}
+/
/+
def main(){
	n:=10;
	y:=measure(H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹),H(0:𝔹));
	x:=vector(10,0:𝔹);
	for i in [0..n){ x[i]:=H(x[i]); }
	r := 0:𝔹;
	for i in [0..n){ r⊕=x[i]&y[i]; }
	if r { phase(π); }
	forget(r);
	for i in [0..n){ x[i]:=H(x[i]); }
	assert(measure(x)==y);
}
+/
/+
def main(){
	n:=4;
	applyPhase:=measure(H(0:𝔹));
	x:=vector(4,0:𝔹);
	for i in [0..n){ x[i]:=H(x[i]); }
	r := 0:𝔹;
	for i in [0..n){ r⊕=x[i]; }
	if r&&applyPhase { phase(π); }
	forget(r);
	for i in [0..n){ x[i]:=H(x[i]); }
	return (applyPhase,measure(x)==vector(4,0:!𝔹)); // TODO: correct type for vectors and tuples
}+/

/+
def main(){
	x:=(0,1,1,0):𝔹^4;
	i:=0:int[2];
	i[0]:=H(i[0]); // TODO
	i[1]:=H(i[1]);
	r:=x[i];
	return (x,r,i);
}
+/
/+import codeforces.summer18.warmup.h;
def main(){
	x := (1,0,1,0,1):𝔹^5;
	r := solve(x);
	return (x,r);
}
+/
/+
import codeforces.summer18.warmup.g;
def main(){
	x:=(0,0,1,0,1):𝔹^5;
	return solve(x,3);
}
+/
/+
def main(){
	x:=(0,1,1,0):𝔹^4;
	x[0]:=H(x[0]);
	return x;
}
+/
/+
def main(){
	x:=(0,1,1,0):𝔹^4;
	a:=0:𝔹;
	(a,x[0]):=(x[0],a);
	a:=H(a);
	(a,x[0]):=(x[0],a);
	forget(a=(0:𝔹));
	return x;
}
+/
/+
def main(){
	x:=(0,1,1,0):𝔹^4;
	x[0]=1:𝔹;
	return x;
}
+/

/+
def id[τ:*](const x:τ)lifted⇒dup(x);

def main(){
	return id(0:𝔹);
}
+/
/+
def sum[n:!ℕ](const a:int[32]^n)lifted{
	r:=0:int[32];
	for i in [0..n){
		r+=a[i];
	}
	return r;
}

def add(n:!ℕ,const x:int[32])lifted{
	r:=0:int[32];
	for i in [0..n){
		r+=x;
	}
	return r;
}

def main(){
	b := H(0:𝔹);
	a := vector(10,b as int[32]); // TODO
	r:=add(10,sum(a));
	return (a,b,r);
}
+/
/+def main(){
	a := 0:𝔹;
	b:=dup(dup(dup(dup(dup(a))))); // TODO: use only two variables
	measure(a,b);
	x:=0;
}
+/
/+
def sum(const a:int[32])lifted{
	//r:=dup(a);
	r:=0:int[32];
	r+=a;
	return r;
}

def main(){
	b := H(0:𝔹);
	a := dup(b as int[32]); // TODO
    r:=sum(sum(sum(a)));
	return measure(a,b,r);
}
+/
/+
def main(){
	b:=H(0:𝔹);
	a:=dup(b);
	return (a,b);
}
+/
/+
def main(){
	b := H(0:𝔹);
	x := b as int[32]; // TODO
	return x;
}
+/
/+
def main(){
	b:=H(0:𝔹);
	a:=dup(b as int[32]); // TODO
	measure(a,b);
	x:=0;
}
+/
/+
def sum(const a:int[32])lifted{
	//r:=0:int[32];
	//r+=a;
	r:=dup(a);
	return r;
}

def main(){
	b := H(0:𝔹);
	a := dup(b as int[32]); // TODO
	r:=sum(a);
	measure(a,b,r);
	x:=0;
}
+/
/+
def f(t:int[32]){
	return t;
}

def main(){
	a := 0:int[32];
	b := 1:int[32];
	x := f(a+b);
	forget(a=(0:int[32]));
	forget(b=(1:int[32]));
	return x;
}
+/
/+
def f()lifted⇒0:int[32];
def main(){
	y:=f()+f();
	return (y);
}
+/
/+
def main(){
	x := H(0:𝔹);
	f := dup(()⇒x); // error
}
+/
//def f[a,b,c](x:a,y:b,z:c)⇒(x,y,z);
/+
def geom(){
	if measure(H(0:𝔹)){ return 0; }
	return 1+geom();
}

def main(){
	return geom();
}
+/
/+
def main(){
	x:=0;
	forget(x);
	return x; // TODO: error?
}
+/
/+
def main(){
	x:=H(0:𝔹);
	z:=H(0:𝔹);
	fy₁:=lambda(const z:𝔹)lifted⇒dup(z);
	fy₂:=lambda(const z:𝔹)lifted⇒!z;
	fy₃:=lambda(const x:𝔹,const z:𝔹)lifted⇒if x then fy₁(z) else fy₂(z);
	if x{
		y:=dup(z);
	}else{
		y:=!z;
	}
	//y:=if x then dup(z) else !z;
	forget(y=fy₃(x,z));
	return (x,z);
}
+/
/+
def main(){
	x:=H(0:𝔹);
	if true{
		y:=dup(x);
		forget(y);
	}
	x:=H(x);
	return x;
}
+/
/+
def main(){
	x:=H(0:𝔹);
	def f(x:𝔹)⇒H(x);
	y:=x;
	y:=f(y);
	return y;
}
+/
/+
def main(){
	x:=1:𝔹;
	if x{
		def f[a,b,c](x:a,y:b,z:c)⇒(x,y,z);
		return (1,2,3);
	}else{
		return (2,3,4);
	}
}
+/
/+def main(){
	x:=vector(3,0:𝔹);
	//x[0]:=H(x[0]);
	return x[1];
}
+/

/+
import codeforces.summer18.warmup.f;
def main(){
	x:=vector(3,0:𝔹);
	x[1]:=X(x[1]);
	bits:=vector(2,vector(3,0:!𝔹));
	bits[0][1]=1:!𝔹;
	r:=solve(x,bits);
	measure(x);
	return r;
	//return solve((0,1,0):𝔹^3,((0,1,0),(1,0,1)):(𝔹^3)^2); // TODO!
}
+/
/+
import codeforces.summer18.warmup.d;

def main(){
	assert(solve(H(0:𝔹))==1);
	assert(solve(H(1:𝔹))==-1);
}
+/
/+
def fib(f: !ℕ !→ !ℕ)(n:!ℕ){
	if n<=1{ return n; }
	return f(n sub 1)+f(n sub 2);
}

def fix[a](f: (a!→a)!→(a!→a)){
	def g(x:a):a⇒f(g)(x); // TODO
	return g;
}
def main(){
	return fix(fib)(10);
}
+/
/+
def fib(n:!ℕ):!ℕ{
	if n<=1{ return n; }
	return fib(n sub 1)+fib(n sub 2);
}
def main(){
	return fib(10);
}
+/

/+def main(){
	//x := [1,2,3:!ℝ];
	x := vector(3,1);
	y := x;
	r := 0:!ℝ;
	for i in [0..3){
		r+=y[i];
	}
	return r;
}
+/
/+
def add(x:!ℝ,y:!ℝ){
	return x+y;
}

def main(){
	//x := H(0:𝔹);
	//return measure(x);
	x:=1;
	y:=[2.2];
	//return add(1,2);
	return add(x,y[0..1][0]);
}
+/
/+
def todo[n:!ℕ](const x:uint[n]){
	t := (0,0):(uint[n]×uint[n]);
	t[0] = dup(x):uint[n];
	__show(__query("dep",t)); // {x}
	return t;
}
+/
/+def sum[n:!ℕ](const x:uint[n][],const y:uint[n])mfree:uint[n]{
	s := dup(y): uint[n];
	for i in [0..x.length){
		s = s + x[i];
	}
	__show(__query("dep",s));
	return s;
}
+/
/+
def bad[n:!ℕ](x:uint[n])mfree{
	s := x;
	s -= s; // error
	return s;
}
+/
/+
def bad[n:!ℕ](x:uint[n])mfree{
	s := 0: uint[n];
	s = x;
	s = 0; // error
	return s;
}
+/
/+
def f(const a:𝔹[],x:𝔹,y:!𝔹):𝔹{
	if y{
		x := H(x);
	}
	return x;
}
def main(n:!ℕ){
	a := array(n,0:𝔹);
	a[0] := f(a,a[0],true); // error
	return a;
}
+/

/+
def main[n:!ℕ](a: 𝔹[], i: int[n]){
	x := a[i];
	forget(x); // TODO: don't require this
	return (a,i);
}
+/
/+def f[a](const b: a[])[b](const c: b[]){

}+/
/+
def f[a:*,n:!ℕ]: Π(const b: a^n). 1{
	return (const b: a^n){

	}
}

A → B

Π(_: A). B

(const A) → B

Π(const _: A). B.

def grover[n](f: Π(const x: uint[n]). 𝔹){

}

def main(){
	f(x);
	x := 2;
	y := []: ℝ^x;
}
+/

/+
def f(const x:𝔹)lifted{
	phase(π); // error
	return ();
}

def main(){
	x := f(0:𝔹);
	forget(x=f(0:𝔹));
}
+/
/+def abc(){
    b := f(cand);
    if b{
        phase(π);
    }
    forget(b=f(cand));
}
+/
/+
def main(){
	//x := 0:!ℤ;
//repeat 10 { x -= 2; }
//return 2.0*π*2^(-1);
x := 2.0^-1;
x = "";
}
+/
	/+
	def main(){
		x := 1:𝔹;
		if x {
			return 1:𝔹; // TODO: this should be an error!
		}
		return x;
	}
+/
	/+
	def main(x:𝔹^5){
		//x := 0:int[5];
		return x[x:int[5]];
	}
+/
	/+
	def main(){
		x := false:𝔹;
		if x{
			z := H(false):𝔹;
		}
	}
+/
	/+
	def flipWith_Array[l:!N](const p:𝔹^l, q:𝔹^l) mfree : 𝔹^l {
		for i in[0..l) {
			if p[i] { q[i] := X(q[i]); }
		}
		return q;
	}

def a8_FetchT_Array[n:!N, rr:!N, r:!N](const i:int[r], const tt:int[n]^rr) : int[n] {
	ttd := 0:int[n];
	for j in [0..rr) {
		if i == j {
			ttd := flipWith_Array(tt[j]:B^n, ttd:B^n):int[n];
		}	}
	return ttd;
}
+/

/+def flipWith_Array[l:!N](const p:𝔹^l, q:𝔹^l)mfree : 𝔹^l {
	for i in[0..l) {
		if p[i] { q[i] := X(q[i]); }
	}
	return q;
}

def a8_FetchT_Array[n:!N, rr:!N, r:!N](const i:int[r], const tt:int[n]^rr) : int[n] {
	ttd := 0:int[n];
	for j in [0..rr) {
		if i == j {
			ttd := flipWith_Array(tt[j]:B^n, ttd:B^n):int[n];
	}	}
	return ttd;
}
+/

/+
def a12_FetchStoreE[rr:!N,r:!N](const i:int[r], qs: (𝔹^rr)^rr,
	ps: 𝔹^rr) : (𝔹^rr)^rr x 𝔹^rr {

	for j in [0..rr) {
		for l in [0..j) {
			if i == j { (qs[j][l], ps[l]) := (ps[l], qs[j][l]); }
			if i == l { (qs[j][l], ps[j]) := (ps[j], qs[j][l]); }
		}
	}
	return (qs, ps);
}
+/
/+
def main(){
	y := 0:𝔹;
	x := dup(y);
	//forget(y=measure(x)+1);
	z := measure(H(false));
	//forget(y=x);
	//return x;
}
+/

/+
def main(x: 𝔹){
	y := dup(x);
	x := H(x);
	return x;
}
+/
/+def main(x: 𝔹)lifted{
	y := dup(x); // TODO: ok
	return x;
}
+/


/+def Node[k:!ℕ]lifted ⇒ int[k];

def edgeOracle_spec[k:!ℕ]lifted ⇒ ((const int[k] x const int[k] x 𝔹) !-> 𝔹);

def QWTFP_spec[k:!ℕ]lifted ⇒ (!N x !N x edgeOracle_spec[k]);

def a5_SETUP[k:!ℕ](oracle:!QWTFP_spec[k], const tt:int[2^oracle[1]]) : (𝔹^(2^oracle[1]))^(2^oracle[1]) {
    (n, r, edgeOracle) := oracle;
    rr := 2^r;
    ee := vector(2^oracle[1], vector(2^oracle[1], false:𝔹));

    // Todo: CHECK INDICES!
    for k in [0..2^r) {
        for j in [0..2^r) {
            ee[k][j] := edgeOracle(tt[j], tt[k], ee[k][j]);
    }    }

    return ee;
}
+/
/+
def a4_Hadamard_Array[k:!N](q:𝔹^k) : 𝔹^k {
    for j in [0..k) { q[j] := H(q[j]); }
    return q;
}

def a4_Hadamard_Array_Array[k:!N,l:!N](q:(𝔹^k)^l) : (𝔹^k)^l {
    for i in [0..l) {
        q[i] := a4_Hadamard_Array(q[i]);
    }
    return q;
}

// -------------------------------------------------------------

def a7_Diffuse_Array[k:!N](q:𝔹^k) : 𝔹^k {
    q := a4_Hadamard_Array(q);
    if q == array(k,false) { phase(π); }
    q := a4_Hadamard_Array(q);
	return q;
}

// -------------------------------------------------------------

def flipWith_Array[l:!N](const p: 𝔹^l, q:𝔹^l) : 𝔹^l {
    for i in[0..l) {
        if p[i] { q[i] := X(q[i]); }
    }
    return q;
}
+/


/+def QFT[n:!N]lifted(psi:uint[n]) mfree: uint[n];

def inverse[τ,χ]lifted(f: τ !→ mfree χ)lifted(x:χ)mfree ⇒ reverse(λ(x:τ,const _:𝟙)mfree. f(x))(x,());

def PeriodFinding[n:!N](f:!(uint[n] -> lifted uint[n])):!N{
    cand := 0:uint[n];
    //for k in [0..n) { cand[k] := H(cand[k]); }
    ancilla := f(cand);
	cand := inverse(QFT[n])(cand);
    measure(ancilla);
    return measure(cand):!N;
}
+/
/+
def main(){
	x := 0: !int[100];
	//x[0]⊕=1:𝔹;
	x[1]=1:!𝔹;
}
+/
/+
def main(){
	c := H(false);
	if c{
		//x := H(false);
		y := [dup(c),1,2];
	}else{
		//x := H(true);
		y := [dup(c),2];
	}
	c:=H(c);
	forget(c=false);
	return y;
}
+/
/+
def id[x](a:x):x;

def main(){
	x := id(2);
}
+/
/+
def main[n:!ℕ](x: 𝔹^n){
	//y := x[1];
	y := x;
	y[1] := true;
	return (y);
}
+/

/+
def zero(n:!ℕ):int[n]{
	return 0:int[n];
}+/

/+
def main(){
	x := 0: int[64];
	//y := true : !𝔹;
	y := x+1:ℕ;
	//z := measure(y);
	//forget(x=z-1);
}
+/

/+
def f[k:!ℕ](x: int[k]){
	return x;
}

def main(i: int[32]){
	return f(i);
}
+/


/+
def main(x:ℕ){
	f := λ(a:𝟙,const b:𝟙)mfree. x;
	g := dup(f);
	reverse[𝟙,𝟙,ℕ](f)(g((),()),());
}
+/
/+
def main(x:ℕ){
	y := H(false);
	f := λ(x:ℕ,const _:𝟙)mfree.{
		y := y;
		xpy := x+y;
		forget(x=xpy-y);
		return (xpy,y);
	};
	return reverse[ℕ,𝟙,ℕ×𝔹](f)((x,H(false)),());
}
+/
/+
def main(x:𝔹){
	if x{
		y := H(x);
	}else{
		y := H(X(x));
	}
	return y;
}
+/
/+
def main(x:𝔹){
	if x{
		measure(x);
	}else{
		measure(x);
	}
}
+/
/+
def main(){
	x := reverse;
	x = 2;
}
+/
/+
def f(x: 𝔹, y: !𝔹){
	return x;
}

def main(){
	x := (true:𝔹,false:!𝔹);
	return f(x);
}
+/

/+
def f(const x: 𝔹, const y: 𝔹)lifted{
	a:=(dup(x),1);
	return (dup(x),a);
}
+/
/+
def f(const x: 𝔹)lifted{
	y := x;
	return ()=>y;
}
+/
/+
def f(const x: 𝔹){
	y := x;
	return y;
}
+/
/+
def f(const x: 𝔹){
	f:=()=>x;
	return f;
}
+/
/+
def CNOT(x:𝔹,const y:𝔹){
	return (x,y);
}

def main(){
	k := (false,false): 𝔹×𝔹;
	return CNOT(k);
}
+/
/+
def main(x: 𝔹){
	x := x;
	return (){ x:=x; y:=x+1; forget(x=y-1); return y; }
}
+/

/+def main(const x: 𝔹){
	return x+1;
}
+/
/+def main(const x: 𝔹){
	return ()⇒x+1;
}
+/

/+
def main(const x: 𝔹){
	def f(){ def g()⇒x; return g; }
	return f;
	//return ()=>x;
}
+/

/+
def main(){
	x := false:!𝔹;
	def f(){ return x; }
	y := x;
	return (f(),f());
}
+/
/+
def main(){
	x := false:𝔹;
	f := ()=>x;
	//def f(){ return x; }
	y := x; // error
	//return f;
	return (f,f); // error
}
+/
/+
def main():!(ℕ[]){
	return dup[ℕ[]]([1,2,3]):!ℕ[];
}
+/
/+
def main():!ℕ×!ℕ{
	return dup[ℕ×ℕ](1,2);
}
+/
/+def main():!ℕ{
	return dup[ℕ](1);
}
+/
/+def main(){
	f := lambda(x:ℝ)lifted. { return x; };
	x:=2;
	return f(x);
}
+/
/+def main(x: 𝔹)mfree{
	measure(x);
}
+/

/+def foo()mfree:ℕ{
	n := 0:ℕ;
	if H(false){
		n+=foo();
	}
	return n;
}
+/

/+def main(){

}+/

/+
def main(x: 𝔹,y: 𝔹){
	return H(x)||H(y);
}
+/
/+
def main(x: 𝔹)mfree{
	y := dup(H(x));
	return y;
}
+/
/+def main(x: 𝔹){
	if measure(dup(x)){
		y:=H(x);
	}else{
		y:=H(x);
		//y := H(true);
		//measure(x);
		//forget(x=z);
		//z := H(x);
	}
    return y;
}
+/
/+
def main(x: !𝔹){
	/+f := lambda(i:const ℕ, ee:𝔹[][]) . {
		return (ee, tt);
	};+/
	y := 3;
	return x;
}
+/
/+def main(){
	if !x{

	}
	if !(triTestT == 0 && triTestTw == 0) {
		phase(pi);
	}
}
+/

/+
rbar := 5;

def f(const x:𝔹){
	y := x;
	//if measure(x){ y:=hadamard(y); } // TODO: error
	if x{ y:=hadamard(y); } // TODO: ok
	return y; // TODO: ok
}

def main(){
	a := hadamard(false);
	b := hadamard(false);
	return f(a&&b);
}
+/

/+
//x:=2;

def main(const n: !Int[32],b:!ℤ)lifted:𝟙{
	x := false:𝔹;
	x := H(x):𝔹;
	//y := main : !Int[32]×!𝔹 →lifted 𝟙;
	//y := main : Π(consumed n: Int[32],x: !𝔹). lifted 𝟙;
	//y := main: const Int[32] × !𝔹 →mfree 𝟙;
	m := n: Int[32];
	def foo(f: !(𝔹 → 𝔹)){
		return f: (𝔹 → 𝔹);
	}
	/+y = 2;
	if x{

	}+/
}
+/
