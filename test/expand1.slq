// args: --run

def expand[n: !ℕ](x: uint[n]) qfree: uint[2*n] {
    v₀ := 0 as uint[n];
    return ((x as 𝔹^n) ~ (v₀ as 𝔹^n)) as uint[2*n];
}

def identity_but_slower(x: uint[1]) qfree {
    expand[1](y) := expand[1](x);
    return y;
}

def main() {
    a := 1: uint[1];
    q := H(0: 𝔹);
    if q {
        a := identity_but_slower(a);
    }
    q := H(q);
    measure(q);
    return a;
}
